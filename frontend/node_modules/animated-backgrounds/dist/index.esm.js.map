{"version":3,"file":"index.esm.js","sources":["../src/backgroundAnimations.js","../src/index.js"],"sourcesContent":["// src/backgroundAnimations.js\r\n\r\nexport const starryNight = (canvas, ctx) => {\r\n    const stars = [];\r\n    for (let i = 0; i < 150; i++) {\r\n        stars.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 2,\r\n            vx: Math.floor(Math.random() * 50) - 25,\r\n            vy: Math.floor(Math.random() * 50) - 25,\r\n            twinkle: Math.random()\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(15, 23, 42, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        ctx.fillStyle = '#FFF';\r\n        stars.forEach(star => {\r\n            star.twinkle += 0.02;\r\n            const opacity = Math.abs(Math.sin(star.twinkle));\r\n            ctx.beginPath();\r\n            ctx.arc(star.x, star.y, star.radius, 0, 2 * Math.PI);\r\n            ctx.fillStyle = `rgba(255, 255, 255, ${opacity})`;\r\n            ctx.fill();\r\n\r\n            star.x += star.vx / 60;\r\n            star.y += star.vy / 60;\r\n\r\n            if (star.x < 0 || star.x > canvas.width) star.vx = -star.vx;\r\n            if (star.y < 0 || star.y > canvas.height) star.vy = -star.vy;\r\n        });\r\n    };\r\n};\r\n\r\nexport const floatingBubbles = (canvas, ctx) => {\r\n    const bubbles = [];\r\n    for (let i = 0; i < 75; i++) {\r\n        bubbles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 30 + 5,\r\n            speed: Math.random() * 0.7 + 0.1,\r\n            color: `hsla(${Math.random() * 360}, 70%, 60%, 0.6)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(30, 41, 59, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        bubbles.forEach(bubble => {\r\n            ctx.beginPath();\r\n            ctx.arc(bubble.x, bubble.y, bubble.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = bubble.color;\r\n            ctx.fill();\r\n            ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\r\n            ctx.stroke();\r\n\r\n            bubble.y -= bubble.speed;\r\n            bubble.x += Math.sin(bubble.y * 0.03) * 0.5;\r\n            if (bubble.y + bubble.radius < 0) {\r\n                bubble.y = canvas.height + bubble.radius;\r\n                bubble.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const gradientWave = (canvas, ctx) => {\r\n    let time = 0;\r\n\r\n    return () => {\r\n        time += 0.01;\r\n\r\n        const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n        gradient.addColorStop(0, `hsl(${time * 10 % 360}, 70%, 50%)`);\r\n        gradient.addColorStop(1, `hsl(${(time * 10 + 180) % 360}, 70%, 50%)`);\r\n\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, canvas.height * 0.15 * i + Math.sin(time + i) * 30);\r\n            for (let x = 0; x < canvas.width; x += 10) {\r\n                ctx.lineTo(x, canvas.height * 0.15 * i + Math.sin(time + i + x * 0.01) * 30);\r\n            }\r\n            ctx.strokeStyle = `rgba(255, 255, 255, ${0.1 - i * 0.01})`;\r\n            ctx.lineWidth = 2;\r\n            ctx.stroke();\r\n        }\r\n    };\r\n};\r\n\r\nexport const particleNetwork = (canvas, ctx) => {\r\n    const particles = [];\r\n    const particleCount = 150;\r\n    const maxDistance = 120;\r\n\r\n    for (let i = 0; i < particleCount; i++) {\r\n        particles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 3 + 1,\r\n            vx: Math.random() * 1.5 - 0.75,\r\n            vy: Math.random() * 1.5 - 0.75,\r\n            color: `hsl(${Math.random() * 360}, 70%, 70%)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(15, 23, 42, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        particles.forEach(particle => {\r\n            particle.x += particle.vx;\r\n            particle.y += particle.vy;\r\n\r\n            if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;\r\n            if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = particle.color;\r\n            ctx.fill();\r\n        });\r\n\r\n        for (let i = 0; i < particles.length; i++) {\r\n            for (let j = i + 1; j < particles.length; j++) {\r\n                const dx = particles[i].x - particles[j].x;\r\n                const dy = particles[i].y - particles[j].y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n                if (distance < maxDistance) {\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(particles[i].x, particles[i].y);\r\n                    ctx.lineTo(particles[j].x, particles[j].y);\r\n                    ctx.strokeStyle = `rgba(255, 255, 255, ${1 - distance / maxDistance})`;\r\n                    ctx.lineWidth = 0.5;\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n        }\r\n    };\r\n};\r\nexport const galaxySpiral = (canvas, ctx, speed = 0.0001) => {\r\n    const stars = initializeStars(canvas, 2000);\r\n    let rotation = 0;\r\n\r\n    function initializeStars(canvas, starCount) {\r\n        const stars = [];\r\n        for (let i = 0; i < starCount; i++) {\r\n            const distance = Math.random() * canvas.width * 0.4;\r\n            const angle = Math.random() * Math.PI * 2;\r\n            stars.push({\r\n                x: Math.cos(angle) * distance,\r\n                y: Math.sin(angle) * distance,\r\n                radius: Math.random() * 1.5 + 0.5,\r\n                color: `hsl(${Math.random() * 60 + 200}, 80%, 70%)`,\r\n                angle: angle,\r\n                distance: distance\r\n            });\r\n        }\r\n        return stars;\r\n    }\r\n\r\n    function drawStars(ctx, stars, rotation, speed) {\r\n        stars.forEach(star => {\r\n            const x = Math.cos(star.angle) * star.distance;\r\n            const y = Math.sin(star.angle) * star.distance;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(x, y, star.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = star.color;\r\n            ctx.fill();\r\n\r\n            // Adjust the angle increment here to control the speed of star rotation\r\n            star.angle += speed / (star.distance * 0.00008);\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(10, 10, 30, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.save();\r\n        ctx.translate(canvas.width / 2, canvas.height / 2);\r\n        ctx.rotate(rotation);\r\n\r\n        drawStars(ctx, stars, rotation, speed);\r\n\r\n        ctx.restore();\r\n        // Adjust the rotation increment here to control the speed of galaxy rotation\r\n        rotation += speed;\r\n    };\r\n};\r\nexport const rainbowWaves = (canvas, ctx) => {\r\n    let time = 0;\r\n    const waves = 7;\r\n    const colors = ['#FF0000', '#FF7F00', '#FFFF00', '#00FF00', '#0000FF', '#4B0082', '#8B00FF'];\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        time += 0.02;\r\n\r\n        for (let i = 0; i < waves; i++) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, canvas.height / 2);\r\n\r\n            for (let x = 0; x < canvas.width; x++) {\r\n                const y = Math.sin(x * 0.01 + time + i * 0.5) * 50 +\r\n                    Math.cos(x * 0.02 + time * 0.7 + i * 0.3) * 25 +\r\n                    canvas.height / 2;\r\n                ctx.lineTo(x, y);\r\n            }\r\n\r\n            ctx.strokeStyle = colors[i % colors.length];\r\n            ctx.lineWidth = 4;\r\n            ctx.stroke();\r\n        }\r\n    };\r\n};\r\nexport const auroraBorealis = (canvas, ctx) => {\r\n    let time = 0;\r\n    const colorStops = [\r\n        { pos: 0, color: 'rgba(0, 255, 128, 0.5)' },\r\n        { pos: 0.5, color: 'rgba(0, 128, 255, 0.5)' },\r\n        { pos: 1, color: 'rgba(128, 0, 255, 0.5)' }\r\n    ];\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        time += 0.005;\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            const gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\r\n            colorStops.forEach(stop => {\r\n                gradient.addColorStop(stop.pos, stop.color);\r\n            });\r\n\r\n            ctx.beginPath();\r\n            for (let x = 0; x < canvas.width; x++) {\r\n                const y = Math.sin(x * 0.01 + time + i) * 50 +\r\n                    Math.sin(x * 0.02 - time * 1.5 + i) * 30 +\r\n                    canvas.height * (0.4 + i * 0.2);\r\n                ctx.lineTo(x, y);\r\n            }\r\n            ctx.lineTo(canvas.width, canvas.height);\r\n            ctx.lineTo(0, canvas.height);\r\n            ctx.closePath();\r\n\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        }\r\n    };\r\n};\r\nexport const neonPulse = (canvas, ctx) => {\r\n    const circles = [];\r\n    const colors = ['#FF00FF', '#00FFFF', '#FFFF00', '#FF00AA'];\r\n\r\n    for (let i = 0; i < 20; i++) {\r\n        circles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 50 + 20,\r\n            color: colors[Math.floor(Math.random() * colors.length)],\r\n            phase: Math.random() * Math.PI * 2\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        circles.forEach(circle => {\r\n            const glow = Math.sin(circle.phase) * 20 + 30;\r\n            const gradient = ctx.createRadialGradient(\r\n                circle.x, circle.y, 0,\r\n                circle.x, circle.y, circle.radius\r\n            );\r\n            gradient.addColorStop(0, circle.color);\r\n            gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(circle.x, circle.y, circle.radius + glow, 0, Math.PI * 2);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n\r\n            circle.phase += 0.05;\r\n        });\r\n    };\r\n};\r\nexport const cosmicDust = (canvas, ctx) => {\r\n    const particles = [];\r\n    const particleCount = 300;\r\n\r\n    for (let i = 0; i < particleCount; i++) {\r\n        particles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 2 + 0.5,\r\n            speedX: (Math.random() - 0.5) * 0.5,\r\n            speedY: (Math.random() - 0.5) * 0.5,\r\n            color: `hsl(${Math.random() * 60 + 180}, 100%, 70%)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        particles.forEach(particle => {\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = particle.color;\r\n            ctx.fill();\r\n\r\n            particle.x += particle.speedX;\r\n            particle.y += particle.speedY;\r\n\r\n            if (particle.x < 0 || particle.x > canvas.width) particle.speedX *= -1;\r\n            if (particle.y < 0 || particle.y > canvas.height) particle.speedY *= -1;\r\n        });\r\n    };\r\n};\r\nexport const electricStorm = (canvas, ctx) => {\r\n    let time = 0;\r\n    const bolts = [];\r\n\r\n    function createBolt() {\r\n        const startX = Math.random() * canvas.width;\r\n        let x = startX;\r\n        let y = 0;\r\n        const points = [{ x, y }];\r\n\r\n        while (y < canvas.height) {\r\n            x += (Math.random() - 0.5) * 50;\r\n            y += Math.random() * 20 + 10;\r\n            points.push({ x, y });\r\n        }\r\n\r\n        return {\r\n            points,\r\n            life: 5 + Math.random() * 5,\r\n            width: Math.random() * 3 + 1\r\n        };\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.2)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        time += 0.1;\r\n        if (Math.random() < 0.1) bolts.push(createBolt());\r\n\r\n        bolts.forEach((bolt, index) => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(bolt.points[0].x, bolt.points[0].y);\r\n            for (let i = 1; i < bolt.points.length; i++) {\r\n                ctx.lineTo(bolt.points[i].x, bolt.points[i].y);\r\n            }\r\n            ctx.strokeStyle = `rgba(180, 220, 255, ${bolt.life / 10})`;\r\n            ctx.lineWidth = bolt.width;\r\n            ctx.stroke();\r\n\r\n            bolt.life -= 0.2;\r\n            if (bolt.life <= 0) bolts.splice(index, 1);\r\n        });\r\n    };\r\n};\r\n\r\nexport const quantumField = (canvas, ctx) => {\r\n    const particles = [];\r\n    const particleCount = 100;\r\n\r\n    for (let i = 0; i < particleCount; i++) {\r\n        particles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 4 + 1,\r\n            speedX: (Math.random() - 0.5) * 2,\r\n            speedY: (Math.random() - 0.5) * 2,\r\n            hue: Math.random() * 360\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        particles.forEach(particle => {\r\n            particle.x += particle.speedX;\r\n            particle.y += particle.speedY;\r\n\r\n            if (particle.x < 0 || particle.x > canvas.width) particle.speedX *= -1;\r\n            if (particle.y < 0 || particle.y > canvas.height) particle.speedY *= -1;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `hsla(${particle.hue}, 100%, 50%, 0.8)`;\r\n            ctx.fill();\r\n\r\n            particles.forEach(otherParticle => {\r\n                const dx = particle.x - otherParticle.x;\r\n                const dy = particle.y - otherParticle.y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n                if (distance < 100) {\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(particle.x, particle.y);\r\n                    ctx.lineTo(otherParticle.x, otherParticle.y);\r\n                    ctx.strokeStyle = `hsla(${(particle.hue + otherParticle.hue) / 2}, 100%, 50%, ${1 - distance / 100})`;\r\n                    ctx.stroke();\r\n                }\r\n            });\r\n\r\n            particle.hue = (particle.hue + 0.5) % 360;\r\n        });\r\n    };\r\n};\r\n\r\nexport const geometricShapes = (canvas, ctx) => {\r\n    const shapes = [];\r\n    const shapeCount = 50;\r\n\r\n    for (let i = 0; i < shapeCount; i++) {\r\n        shapes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 30 + 10,\r\n            type: Math.floor(Math.random() * 3),\r\n            rotation: Math.random() * Math.PI * 2,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            color: `hsl(${Math.random() * 360}, 70%, 50%)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        shapes.forEach(shape => {\r\n            ctx.save();\r\n            ctx.translate(shape.x, shape.y);\r\n            ctx.rotate(shape.rotation);\r\n            ctx.fillStyle = shape.color;\r\n\r\n            switch (shape.type) {\r\n                case 0: // Square\r\n                    ctx.fillRect(-shape.size / 2, -shape.size / 2, shape.size, shape.size);\r\n                    break;\r\n                case 1: // Circle\r\n                    ctx.beginPath();\r\n                    ctx.arc(0, 0, shape.size / 2, 0, Math.PI * 2);\r\n                    ctx.fill();\r\n                    break;\r\n                case 2: // Triangle\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(0, -shape.size / 2);\r\n                    ctx.lineTo(shape.size / 2, shape.size / 2);\r\n                    ctx.lineTo(-shape.size / 2, shape.size / 2);\r\n                    ctx.closePath();\r\n                    ctx.fill();\r\n                    break;\r\n            }\r\n\r\n            ctx.restore();\r\n\r\n            shape.rotation += shape.speed * 0.05;\r\n            shape.y += shape.speed;\r\n            if (shape.y > canvas.height + shape.size) {\r\n                shape.y = -shape.size;\r\n                shape.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const fireflies = (canvas, ctx) => {\r\n    const fireflies = [];\r\n    const fireflyCount = 100;\r\n\r\n    for (let i = 0; i < fireflyCount; i++) {\r\n        fireflies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 3 + 1,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            brightness: Math.random(),\r\n            angle: Math.random() * Math.PI * 2\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        fireflies.forEach(firefly => {\r\n            firefly.brightness += Math.random() * 0.1 - 0.05;\r\n            firefly.brightness = Math.max(0, Math.min(1, firefly.brightness));\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(firefly.x, firefly.y, firefly.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 100, ${firefly.brightness})`;\r\n            ctx.fill();\r\n\r\n            firefly.x += Math.cos(firefly.angle) * firefly.speed;\r\n            firefly.y += Math.sin(firefly.angle) * firefly.speed;\r\n\r\n            if (firefly.x < 0 || firefly.x > canvas.width || firefly.y < 0 || firefly.y > canvas.height) {\r\n                firefly.angle += Math.PI;\r\n            }\r\n\r\n            if (Math.random() < 0.01) {\r\n                firefly.angle = Math.random() * Math.PI * 2;\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const matrixRain = (canvas, ctx) => {\r\n    const columns = Math.floor(canvas.width / 20);\r\n    const drops = [];\r\n\r\n    for (let i = 0; i < columns; i++) {\r\n        drops[i] = Math.random() * canvas.height;\r\n    }\r\n\r\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%^&*()_+[]{}|;:,.<>?';\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.fillStyle = '#0F0';\r\n        ctx.font = '15px monospace';\r\n\r\n        for (let i = 0; i < drops.length; i++) {\r\n            const text = characters[Math.floor(Math.random() * characters.length)];\r\n            ctx.fillText(text, i * 20, drops[i] * 20);\r\n\r\n            if (drops[i] * 20 > canvas.height && Math.random() > 0.975) {\r\n                drops[i] = 0;\r\n            }\r\n            drops[i] += 0.6;\r\n        }\r\n    };\r\n};\r\n\r\n\r\nexport const dnaHelix = (canvas, ctx) => {\r\n    const speed = 0.02\r\n    const baseRadius = 100\r\n    const amplitude = 50\r\n    const nucleotideSize = 5\r\n    let t = 0;\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.save();\r\n        ctx.translate(canvas.width / 2, canvas.height / 2);\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            ctx.beginPath();\r\n            for (let x = -canvas.width / 2; x < canvas.width / 2; x += 10) {\r\n                const y = Math.sin(x * 0.01 + t + i * Math.PI) * amplitude;\r\n                const r = baseRadius + y;\r\n                ctx.lineTo(x, r);\r\n            }\r\n            ctx.strokeStyle = i === 0 ? 'rgba(255, 0, 0, 0.5)' : 'rgba(0, 0, 255, 0.5)';\r\n            ctx.lineWidth = 2;\r\n            ctx.stroke();\r\n\r\n            // Draw nucleotides\r\n            for (let x = -canvas.width / 2; x < canvas.width / 2; x += 40) {\r\n                const y = Math.sin(x * 0.01 + t + i * Math.PI) * amplitude;\r\n                const r = baseRadius + y;\r\n                ctx.fillStyle = i === 0 ? 'rgba(255, 255, 0, 0.8)' : 'rgba(0, 255, 0, 0.8)';\r\n                ctx.beginPath();\r\n                ctx.arc(x, r, nucleotideSize, 0, Math.PI * 2);\r\n                ctx.fill();\r\n            }\r\n        }\r\n\r\n        ctx.restore();\r\n        t += speed;\r\n    };\r\n}\r\n\r\nexport const neuralNetwork = (canvas, ctx) => {\r\n    const nodeCount = 30;\r\n    const connectionProbability = 0.2;\r\n    const speed = 0.3;\r\n    const nodes = [];\r\n    const connections = [];\r\n\r\n    // Create background gradient\r\n    const backgroundGradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n    backgroundGradient.addColorStop(0, '#000000');\r\n    backgroundGradient.addColorStop(1, '#1a1a2e');\r\n\r\n    for (let i = 0; i < nodeCount; i++) {\r\n        nodes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            vx: (Math.random() - 0.5) * speed,\r\n            vy: (Math.random() - 0.5) * speed,\r\n            size: Math.random() * 2 + 2\r\n        });\r\n    }\r\n\r\n    // Pre-compute connections\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        for (let j = i + 1; j < nodes.length; j++) {\r\n            if (Math.random() < connectionProbability) {\r\n                connections.push([i, j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return () => {\r\n        // Draw background\r\n        ctx.fillStyle = backgroundGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Update and draw nodes\r\n        nodes.forEach((node, index) => {\r\n            node.x += node.vx;\r\n            node.y += node.vy;\r\n\r\n            if (node.x < 0 || node.x > canvas.width) node.vx *= -1;\r\n            if (node.y < 0 || node.y > canvas.height) node.vy *= -1;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(node.x, node.y, node.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `hsl(${index * (360 / nodeCount)}, 100%, 50%)`;\r\n            ctx.fill();\r\n\r\n            // Add glow effect\r\n            ctx.beginPath();\r\n            ctx.arc(node.x, node.y, node.size + 3, 0, Math.PI * 2);\r\n            const gradient = ctx.createRadialGradient(node.x, node.y, node.size, node.x, node.y, node.size + 3);\r\n            gradient.addColorStop(0, `hsla(${index * (360 / nodeCount)}, 100%, 50%, 0.8)`);\r\n            gradient.addColorStop(1, `hsla(${index * (360 / nodeCount)}, 100%, 50%, 0)`);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        });\r\n\r\n        // Draw connections\r\n        connections.forEach(([i, j]) => {\r\n            const dx = nodes[i].x - nodes[j].x;\r\n            const dy = nodes[i].y - nodes[j].y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n            const opacity = 1 - distance / Math.max(canvas.width, canvas.height);\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(nodes[i].x, nodes[i].y);\r\n            ctx.lineTo(nodes[j].x, nodes[j].y);\r\n            ctx.strokeStyle = `rgba(255, 255, 255, ${opacity * 0.2})`;\r\n            ctx.stroke();\r\n        });\r\n\r\n        // Add subtle particle effect\r\n        for (let i = 0; i < 5; i++) {\r\n            ctx.beginPath();\r\n            ctx.arc(Math.random() * canvas.width, Math.random() * canvas.height, Math.random() * 1.5, 0, Math.PI * 2);\r\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\r\n            ctx.fill();\r\n        }\r\n    };\r\n}\r\n\r\nexport const oceanWaves = (canvas, ctx) => {\r\n    const waveCount = 7;\r\n    const amplitude = 30;\r\n    const frequency = 0.02;\r\n    const speed = 0.03;\r\n    let time = 0;\r\n\r\n    // Create sky gradient\r\n    const skyGradient = ctx.createLinearGradient(0, 0, 0, canvas.height * 0.6);\r\n    skyGradient.addColorStop(0, '#87CEEB');\r\n    skyGradient.addColorStop(1, '#E0F6FF');\r\n\r\n    // Create sun\r\n    const sun = {\r\n        x: canvas.width * 0.8,\r\n        y: canvas.height * 0.2,\r\n        radius: 40,\r\n        glow: 20\r\n    };\r\n\r\n    // Create clouds\r\n    const clouds = [\r\n        { x: canvas.width * 0.1, y: canvas.height * 0.15, radius: 30 },\r\n        { x: canvas.width * 0.3, y: canvas.height * 0.1, radius: 40 },\r\n        { x: canvas.width * 0.6, y: canvas.height * 0.2, radius: 35 }\r\n    ];\r\n\r\n    return () => {\r\n        // Draw sky\r\n        ctx.fillStyle = skyGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height * 0.6);\r\n\r\n        // Draw sun\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.arc(sun.x, sun.y, sun.radius, 0, Math.PI * 2);\r\n        const sunGradient = ctx.createRadialGradient(sun.x, sun.y, sun.radius - sun.glow, sun.x, sun.y, sun.radius + sun.glow);\r\n        sunGradient.addColorStop(0, 'rgba(255, 255, 0, 1)');\r\n        sunGradient.addColorStop(0.8, 'rgba(255, 255, 0, 0.3)');\r\n        sunGradient.addColorStop(1, 'rgba(255, 255, 0, 0)');\r\n        ctx.fillStyle = sunGradient;\r\n        ctx.fill();\r\n        ctx.restore();\r\n\r\n        // Draw clouds\r\n        clouds.forEach(cloud => {\r\n            ctx.beginPath();\r\n            ctx.arc(cloud.x, cloud.y, cloud.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n            ctx.fill();\r\n        });\r\n\r\n        // Draw ocean\r\n        for (let i = 0; i < waveCount; i++) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, canvas.height);\r\n\r\n            for (let x = 0; x <= canvas.width; x += 5) {\r\n                const y = Math.sin(x * frequency + time + i * 0.5) * amplitude * (1 + i * 0.1) +\r\n                    (canvas.height - (i + 1) * (canvas.height * 0.4 / waveCount));\r\n                ctx.lineTo(x, y);\r\n            }\r\n\r\n            ctx.lineTo(canvas.width, canvas.height);\r\n            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\r\n            gradient.addColorStop(0, `rgba(0, 100, 255, ${0.1 + (i / waveCount) * 0.15})`);\r\n            gradient.addColorStop(1, `rgba(0, 50, 200, ${0.1 + (i / waveCount) * 0.15})`);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        }\r\n\r\n        time += speed;\r\n    };\r\n}\r\nexport const snowFall = (canvas, ctx) => {\r\n    const snowflakeCount = 200;\r\n    const snowflakes = [];\r\n    const backgroundGradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\r\n    backgroundGradient.addColorStop(0, '#0c1445');\r\n    backgroundGradient.addColorStop(1, '#1c2754');\r\n\r\n    // Create moon\r\n    const moon = {\r\n        x: canvas.width * 0.8,\r\n        y: canvas.height * 0.2,\r\n        radius: 50,\r\n        glow: 20\r\n    };\r\n\r\n    // Create mountains\r\n    const mountains = [\r\n        { points: [[0, canvas.height], [canvas.width * 0.3, canvas.height * 0.7], [canvas.width * 0.5, canvas.height]], color: '#0a1128' },\r\n        { points: [[canvas.width * 0.4, canvas.height], [canvas.width * 0.7, canvas.height * 0.75], [canvas.width, canvas.height]], color: '#0d1636' }\r\n    ];\r\n\r\n    for (let i = 0; i < snowflakeCount; i++) {\r\n        snowflakes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            vx: (Math.random() - 0.5) * 1.5,\r\n            vy: Math.random() * 1 + 0.5,\r\n            size: Math.random() * 3 + 1,\r\n            opacity: Math.random() * 0.5 + 0.5\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = backgroundGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw moon\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.arc(moon.x, moon.y, moon.radius, 0, Math.PI * 2);\r\n        const moonGradient = ctx.createRadialGradient(moon.x, moon.y, moon.radius - moon.glow, moon.x, moon.y, moon.radius + moon.glow);\r\n        moonGradient.addColorStop(0, 'rgba(255, 255, 230, 1)');\r\n        moonGradient.addColorStop(0.5, 'rgba(255, 255, 230, 0.3)');\r\n        moonGradient.addColorStop(1, 'rgba(255, 255, 230, 0)');\r\n        ctx.fillStyle = moonGradient;\r\n        ctx.fill();\r\n        ctx.restore();\r\n\r\n        // Draw mountains\r\n        mountains.forEach(mountain => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(mountain.points[0][0], mountain.points[0][1]);\r\n            mountain.points.forEach(point => ctx.lineTo(point[0], point[1]));\r\n            ctx.fillStyle = mountain.color;\r\n            ctx.fill();\r\n        });\r\n\r\n        snowflakes.forEach(flake => {\r\n            flake.x += flake.vx + Math.sin(flake.y * 0.01) * 0.3;\r\n            flake.y += flake.vy;\r\n\r\n            if (flake.y > canvas.height) {\r\n                flake.x = Math.random() * canvas.width;\r\n                flake.y = -flake.size;\r\n                flake.vx = (Math.random() - 0.5) * 1.5;\r\n                flake.vy = Math.random() * 1 + 0.5;\r\n            }\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(flake.x, flake.y, flake.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 255, ${flake.opacity})`;\r\n            ctx.fill();\r\n        });\r\n\r\n        // Add a subtle glow effect\r\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.03)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    };\r\n}\r\n\r\n\r\nexport const fireflyForest = (canvas, ctx) => {\r\n    const fireflies = [];\r\n    const fireflyCount = 100;\r\n    const trees = [];\r\n    const treeCount = 5;\r\n\r\n    // Create trees\r\n    for (let i = 0; i < treeCount; i++) {\r\n        trees.push({\r\n            x: Math.random() * canvas.width,\r\n            y: canvas.height,\r\n            height: Math.random() * 200 + 300,\r\n            width: Math.random() * 100 + 50\r\n        });\r\n    }\r\n\r\n    // Create fireflies\r\n    for (let i = 0; i < fireflyCount; i++) {\r\n        fireflies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 2 + 1,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            angle: Math.random() * Math.PI * 2,\r\n            angleSpeed: (Math.random() - 0.5) * 0.01,\r\n            glowIntensity: Math.random()\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        // Night sky\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw trees\r\n        trees.forEach(tree => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(tree.x, tree.y);\r\n            ctx.lineTo(tree.x - tree.width / 2, tree.y - tree.height);\r\n            ctx.lineTo(tree.x + tree.width / 2, tree.y - tree.height);\r\n            ctx.closePath();\r\n            ctx.fillStyle = 'rgba(0, 50, 0, 0.8)';\r\n            ctx.fill();\r\n        });\r\n\r\n        // Update and draw fireflies\r\n        fireflies.forEach(fly => {\r\n            fly.x += Math.cos(fly.angle) * fly.speed;\r\n            fly.y += Math.sin(fly.angle) * fly.speed;\r\n            fly.angle += fly.angleSpeed;\r\n\r\n            if (fly.x < 0 || fly.x > canvas.width) fly.angle = Math.PI - fly.angle;\r\n            if (fly.y < 0 || fly.y > canvas.height) fly.angle = -fly.angle;\r\n\r\n            fly.glowIntensity = Math.sin(Date.now() * 0.002 + fly.x * 0.1) * 0.5 + 0.5;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(fly.x, fly.y, fly.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 100, ${fly.glowIntensity})`;\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(fly.x, fly.y, fly.radius * 3, 0, Math.PI * 2);\r\n            const gradient = ctx.createRadialGradient(fly.x, fly.y, 0, fly.x, fly.y, fly.radius * 3);\r\n            gradient.addColorStop(0, `rgba(255, 255, 100, ${fly.glowIntensity * 0.5})`);\r\n            gradient.addColorStop(1, 'rgba(255, 255, 100, 0)');\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        });\r\n    };\r\n};\r\nexport const realisticClouds = (canvas, ctx) => {\r\n    const clouds = [];\r\n    const cloudCount = 10;\r\n    let gradientHeight;\r\n\r\n    function createCloud(x, y) {\r\n        const particleCount = Math.floor(Math.random() * 50) + 50;\r\n        const particles = [];\r\n\r\n        for (let i = 0; i < particleCount; i++) {\r\n            particles.push({\r\n                x: x + Math.random() * 200 - 100,\r\n                y: y + Math.random() * 100 - 50,\r\n                radius: Math.random() * 30 + 10\r\n            });\r\n        }\r\n\r\n        return {\r\n            particles,\r\n            x,\r\n            y,\r\n            speed: Math.random() * 0.5 + 0.1\r\n        };\r\n    }\r\n\r\n    for (let i = 0; i < cloudCount; i++) {\r\n        clouds.push(createCloud(Math.random() * canvas.width, Math.random() * (canvas.height / 2)));\r\n    }\r\n\r\n    // Create gradient for the sky\r\n    const createSkyGradient = () => {\r\n        gradientHeight = canvas.height;\r\n        const gradient = ctx.createLinearGradient(0, 0, 0, gradientHeight);\r\n        gradient.addColorStop(0, '#1e90ff');  // Dodger Blue\r\n        gradient.addColorStop(0.5, '#87ceeb'); // Sky Blue\r\n        gradient.addColorStop(1, '#e6f3ff');  // Very Light Blue\r\n        return gradient;\r\n    }\r\n\r\n    let skyGradient = createSkyGradient();\r\n\r\n    return () => {\r\n        // Redraw sky gradient if canvas size has changed\r\n        if (gradientHeight !== canvas.height) {\r\n            skyGradient = createSkyGradient();\r\n        }\r\n\r\n        // Draw sky\r\n        ctx.fillStyle = skyGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        clouds.forEach(cloud => {\r\n            cloud.x += cloud.speed;\r\n            if (cloud.x > canvas.width + 200) {\r\n                cloud.x = -200;\r\n            }\r\n\r\n            ctx.save();\r\n            ctx.translate(cloud.x, cloud.y);\r\n\r\n            // Draw cloud shadow\r\n            cloud.particles.forEach(particle => {\r\n                ctx.beginPath();\r\n                ctx.arc(particle.x + 5, particle.y + 5, particle.radius, 0, Math.PI * 2);\r\n                ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n                ctx.fill();\r\n            });\r\n\r\n            // Draw cloud\r\n            cloud.particles.forEach(particle => {\r\n                ctx.beginPath();\r\n                ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n                const gradient = ctx.createRadialGradient(particle.x, particle.y, 0, particle.x, particle.y, particle.radius);\r\n                gradient.addColorStop(0, 'rgba(255, 255, 255, 0.8)');\r\n                gradient.addColorStop(1, 'rgba(255, 255, 255, 0.2)');\r\n                ctx.fillStyle = gradient;\r\n                ctx.fill();\r\n            });\r\n\r\n            ctx.restore();\r\n        });\r\n\r\n        // Optional: Add sun\r\n        const sunRadius = 40;\r\n        const sunGlow = 20;\r\n        ctx.beginPath();\r\n        ctx.arc(canvas.width - 100, 100, sunRadius, 0, Math.PI * 2);\r\n        const sunGradient = ctx.createRadialGradient(canvas.width - 100, 100, 0, canvas.width - 100, 100, sunRadius + sunGlow);\r\n        sunGradient.addColorStop(0, 'rgba(255, 255, 200, 1)');\r\n        sunGradient.addColorStop(0.8, 'rgba(255, 255, 0, 0.3)');\r\n        sunGradient.addColorStop(1, 'rgba(255, 255, 0, 0)');\r\n        ctx.fillStyle = sunGradient;\r\n        ctx.fill();\r\n    };\r\n};\r\n\r\nexport const autumnLeaves = (canvas, ctx) => {\r\n    const leaves = [];\r\n    const leafCount = 100;\r\n    const leafColors = ['#ff6b6b', '#feca57', '#ff9ff3', '#ff9f43', '#e17055'];\r\n    const leafImages = [\r\n        '1.jpg',\r\n        '2.jpg',\r\n    ];\r\n    const leafImagesLoaded = [];\r\n    let imagesLoaded = false;\r\n\r\n    // Load images\r\n    const loadImages = () => {\r\n        let loadedCount = 0;\r\n        leafImages.forEach((src, index) => {\r\n            const img = new Image();\r\n            img.onload = () => {\r\n                leafImagesLoaded[index] = img;\r\n                loadedCount++;\r\n                if (loadedCount === leafImages.length) {\r\n                    imagesLoaded = true;\r\n                }\r\n            };\r\n            img.onerror = () => {\r\n                loadedCount++;\r\n                if (loadedCount === leafImages.length) {\r\n                    imagesLoaded = true;\r\n                }\r\n            };\r\n            img.src = src;\r\n        });\r\n    };\r\n\r\n    loadImages();\r\n\r\n    for (let i = 0; i < leafCount; i++) {\r\n        leaves.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 20 + 10,\r\n            speed: Math.random() * 2 + 1,\r\n            amplitude: Math.random() * 20 + 10,\r\n            angle: Math.random() * Math.PI * 2,\r\n            angleSpeed: (Math.random() - 0.5) * 0.05,\r\n            imageIndex: Math.floor(Math.random() * leafImages.length),\r\n            color: leafColors[Math.floor(Math.random() * leafColors.length)]\r\n        });\r\n    }\r\n\r\n    const drawLeaf = (leaf) => {\r\n        ctx.save();\r\n        ctx.translate(leaf.x, leaf.y);\r\n        ctx.rotate(leaf.angle);\r\n\r\n        if (imagesLoaded && leafImagesLoaded[leaf.imageIndex]) {\r\n            ctx.drawImage(leafImagesLoaded[leaf.imageIndex], -leaf.size / 2, -leaf.size / 2, leaf.size, leaf.size);\r\n        } else {\r\n            // Fallback: draw a colored oval if image is not available\r\n            ctx.beginPath();\r\n            ctx.ellipse(0, 0, leaf.size / 2, leaf.size / 4, 0, 0, Math.PI * 2);\r\n            ctx.fillStyle = leaf.color;\r\n            ctx.fill();\r\n        }\r\n\r\n        ctx.restore();\r\n    };\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(135, 206, 235, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        leaves.forEach(leaf => {\r\n            leaf.y += leaf.speed;\r\n            leaf.x += Math.sin(leaf.y * 0.01) * leaf.amplitude * 0.05;\r\n            leaf.angle += leaf.angleSpeed;\r\n\r\n            if (leaf.y > canvas.height) {\r\n                leaf.y = -leaf.size;\r\n                leaf.x = Math.random() * canvas.width;\r\n            }\r\n\r\n            drawLeaf(leaf);\r\n        });\r\n    };\r\n};\r\n\r\nexport const realisticRain = (canvas, ctx) => {\r\n    const raindrops = [];\r\n    const dropCount = 1000;\r\n    const splashes = [];\r\n\r\n    for (let i = 0; i < dropCount; i++) {\r\n        raindrops.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            length: Math.random() * 20 + 10,\r\n            speed: Math.random() * 10 + 15\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw and update raindrops\r\n        ctx.strokeStyle = 'rgba(174, 194, 224, 0.5)';\r\n        ctx.lineWidth = 1;\r\n        raindrops.forEach(drop => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(drop.x, drop.y);\r\n            ctx.lineTo(drop.x, drop.y + drop.length);\r\n            ctx.stroke();\r\n\r\n            drop.y += drop.speed;\r\n\r\n            if (drop.y > canvas.height) {\r\n                drop.y = -drop.length;\r\n                splashes.push({\r\n                    x: drop.x,\r\n                    y: canvas.height,\r\n                    radius: Math.random() * 3 + 1,\r\n                    opacity: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        // Draw and update splashes\r\n        splashes.forEach((splash, index) => {\r\n            ctx.beginPath();\r\n            ctx.arc(splash.x, splash.y, splash.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(174, 194, 224, ${splash.opacity})`;\r\n            ctx.fill();\r\n\r\n            splash.radius += 0.1;\r\n            splash.opacity -= 0.03;\r\n\r\n            if (splash.opacity <= 0) {\r\n                splashes.splice(index, 1);\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\n\r\nexport const fallingFoodFiesta = (canvas, ctx) => {\r\n    const foodItems = [];\r\n    const foodTypes = ['🍔', '🍕', '🌭', '🍟', '🌮', '🍣', '🍩', '🍦', '🍎', '🍇', '🍓', '🍑', '🍍', '🥑', '🥕', '🥪', '🥨', '🧀', '🥐', '🥯', '🍱', '🍜', '🍙', '🍗', '🥟', '🥘', '🍤', '🥞', '🧇', '🥓'];\r\n    const numItems = 50;\r\n\r\n    // Lighter gradient colors\r\n    const colors = [\r\n        { r: 255, g: 102, b: 102 },  // Light Red\r\n        { r: 255, g: 178, b: 102 },  // Light Orange\r\n        { r: 255, g: 255, b: 153 },  // Light Yellow\r\n        { r: 153, g: 255, b: 153 },  // Light Green\r\n        { r: 153, g: 204, b: 255 },  // Light Blue\r\n        { r: 178, g: 102, b: 255 },  // Light Indigo\r\n        { r: 255, g: 153, b: 255 }   // Light Violet\r\n    ];\r\n\r\n    let colorIndex = 0;\r\n    let nextColorIndex = 1;\r\n    let colorT = 0;\r\n    const colorSpeed = 0.005;\r\n\r\n    for (let i = 0; i < numItems; i++) {\r\n        foodItems.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height - canvas.height,\r\n            emoji: foodTypes[Math.floor(Math.random() * foodTypes.length)],\r\n            size: Math.random() * 20 + 30,\r\n            speed: Math.random() * 1.5 + 0.5,\r\n            rotation: Math.random() * Math.PI * 2,\r\n            rotationSpeed: (Math.random() * 2 - 1) * 0.02\r\n        });\r\n    }\r\n\r\n    const lerpColor = (color1, color2, t) => {\r\n        return {\r\n            r: Math.round(color1.r + (color2.r - color1.r) * t),\r\n            g: Math.round(color1.g + (color2.g - color1.g) * t),\r\n            b: Math.round(color1.b + (color2.b - color1.b) * t)\r\n        };\r\n    };\r\n\r\n    return () => {\r\n        // Update gradient colors\r\n        colorT += colorSpeed;\r\n        if (colorT >= 1) {\r\n            colorT = 0;\r\n            colorIndex = nextColorIndex;\r\n            nextColorIndex = (nextColorIndex + 1) % colors.length;\r\n        }\r\n        const currentColor = lerpColor(colors[colorIndex], colors[nextColorIndex], colorT);\r\n\r\n        // Create moving gradient with lighter colors\r\n        const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n        gradient.addColorStop(0, `rgb(${currentColor.r}, ${currentColor.g}, ${currentColor.b})`);\r\n        gradient.addColorStop(1, `rgb(${255 - currentColor.r}, ${255 - currentColor.g}, ${255 - currentColor.b})`);\r\n\r\n        // Apply blur effect to the gradient\r\n        ctx.filter = 'blur(5px)';\r\n\r\n        // Draw gradient background\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Reset filter for subsequent drawing\r\n        ctx.filter = 'none';\r\n\r\n        // Draw food items\r\n        foodItems.forEach(item => {\r\n            ctx.save();\r\n            ctx.translate(item.x, item.y);\r\n            ctx.rotate(item.rotation);\r\n            ctx.font = `${item.size}px Arial`;\r\n            ctx.textAlign = 'center';\r\n            ctx.textBaseline = 'middle';\r\n\r\n            // Add a white outline for better visibility\r\n            ctx.strokeStyle = 'white';\r\n            ctx.lineWidth = 3;\r\n            ctx.strokeText(item.emoji, 0, 0);\r\n\r\n            // Fill with black for contrast\r\n            ctx.fillStyle = 'black';\r\n            ctx.fillText(item.emoji, 0, 0);\r\n            ctx.restore();\r\n\r\n            item.y += item.speed;\r\n            item.rotation += item.rotationSpeed;\r\n            if (item.y > canvas.height + item.size) {\r\n                item.y = -item.size;\r\n                item.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const hauntedForest = (canvas, ctx) => {\r\n    const trees = [];\r\n    const fireflies = [];\r\n    const fog = [];\r\n\r\n    // Initialize trees\r\n    for (let i = 0; i < 20; i++) {\r\n        trees.push({\r\n            x: Math.random() * canvas.width,\r\n            height: Math.random() * 200 + 100,\r\n            width: Math.random() * 20 + 10,\r\n        });\r\n    }\r\n\r\n    // Initialize fireflies\r\n    for (let i = 0; i < 50; i++) {\r\n        fireflies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 2 + 1,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            opacity: Math.random(),\r\n        });\r\n    }\r\n\r\n    // Initialize fog\r\n    for (let i = 0; i < 100; i++) {\r\n        fog.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 50 + 20,\r\n            speed: Math.random() * 0.2 + 0.1,\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = '#0a0a0a';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw trees\r\n        ctx.fillStyle = '#1a1a1a';\r\n        trees.forEach(tree => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(tree.x, canvas.height);\r\n            ctx.lineTo(tree.x - tree.width / 2, canvas.height - tree.height);\r\n            ctx.lineTo(tree.x + tree.width / 2, canvas.height - tree.height);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        });\r\n\r\n        // Draw fog\r\n        ctx.fillStyle = 'rgba(200, 200, 200, 0.05)';\r\n        fog.forEach(particle => {\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            ctx.fill();\r\n\r\n            particle.x += particle.speed;\r\n            if (particle.x > canvas.width + particle.radius) {\r\n                particle.x = -particle.radius;\r\n            }\r\n        });\r\n\r\n        // Draw fireflies\r\n        fireflies.forEach(firefly => {\r\n            ctx.beginPath();\r\n            ctx.arc(firefly.x, firefly.y, firefly.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 100, ${firefly.opacity})`;\r\n            ctx.fill();\r\n\r\n            firefly.x += Math.sin(Date.now() * 0.001) * firefly.speed;\r\n            firefly.y += Math.cos(Date.now() * 0.001) * firefly.speed;\r\n            firefly.opacity = Math.sin(Date.now() * 0.01) * 0.5 + 0.5;\r\n\r\n            if (firefly.x < 0) firefly.x = canvas.width;\r\n            if (firefly.x > canvas.width) firefly.x = 0;\r\n            if (firefly.y < 0) firefly.y = canvas.height;\r\n            if (firefly.y > canvas.height) firefly.y = 0;\r\n        });\r\n    };\r\n};\r\n\r\nexport const ghostlyApparitions = (canvas, ctx) => {\r\n    const ghosts = [];\r\n    const numGhosts = 5;\r\n\r\n    for (let i = 0; i < numGhosts; i++) {\r\n        ghosts.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 50 + 30,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            opacity: Math.random() * 0.5,\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = '#000033';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ghosts.forEach(ghost => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(ghost.x, ghost.y);\r\n            ctx.bezierCurveTo(\r\n                ghost.x - ghost.size / 2, ghost.y - ghost.size / 2,\r\n                ghost.x - ghost.size / 2, ghost.y + ghost.size / 2,\r\n                ghost.x, ghost.y + ghost.size\r\n            );\r\n            ctx.bezierCurveTo(\r\n                ghost.x + ghost.size / 2, ghost.y + ghost.size / 2,\r\n                ghost.x + ghost.size / 2, ghost.y - ghost.size / 2,\r\n                ghost.x, ghost.y\r\n            );\r\n\r\n            const gradient = ctx.createRadialGradient(\r\n                ghost.x, ghost.y, 0,\r\n                ghost.x, ghost.y, ghost.size\r\n            );\r\n            gradient.addColorStop(0, `rgba(255, 255, 255, ${ghost.opacity})`);\r\n            gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\r\n\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n\r\n            ghost.y -= ghost.speed;\r\n            ghost.opacity = Math.sin(Date.now() * 0.001) * 0.2 + 0.3;\r\n\r\n            if (ghost.y + ghost.size < 0) {\r\n                ghost.y = canvas.height + ghost.size;\r\n                ghost.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const spiderwebOverlay = (canvas, ctx) => {\r\n    const webs = [];\r\n    const numWebs = 20;\r\n\r\n    for (let i = 0; i < numWebs; i++) {\r\n        webs.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 100 + 50,\r\n            rotation: Math.random() * Math.PI * 2,\r\n        });\r\n    }\r\n\r\n    const drawWeb = (x, y, size, rotation) => {\r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n        ctx.rotate(rotation);\r\n\r\n        ctx.beginPath();\r\n        for (let i = 0; i < 8; i++) {\r\n            const angle = (Math.PI * 2 / 8) * i;\r\n            ctx.moveTo(0, 0);\r\n            ctx.lineTo(Math.cos(angle) * size, Math.sin(angle) * size);\r\n        }\r\n\r\n        for (let r = size / 4; r < size; r += size / 4) {\r\n            ctx.moveTo(r, 0);\r\n            for (let i = 1; i < 8; i++) {\r\n                const angle = (Math.PI * 2 / 8) * i;\r\n                ctx.lineTo(Math.cos(angle) * r, Math.sin(angle) * r);\r\n            }\r\n            ctx.closePath();\r\n        }\r\n\r\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    };\r\n\r\n    return () => {\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        webs.forEach(web => {\r\n            drawWeb(web.x, web.y, web.size, web.rotation);\r\n        });\r\n    };\r\n};\r\n\r\n// Add these to your existing backgroundAnimations.js file\r\n\r\nexport const undeadGraveyard = (canvas, ctx) => {\r\n    const graves = [];\r\n    const zombies = [];\r\n    const fog = [];\r\n\r\n    // Initialize graves\r\n    for (let i = 0; i < 15; i++) {\r\n        graves.push({\r\n            x: Math.random() * canvas.width,\r\n            y: canvas.height - Math.random() * 100 - 50,\r\n            width: Math.random() * 30 + 20,\r\n            height: Math.random() * 40 + 30\r\n        });\r\n    }\r\n\r\n    // Initialize zombies\r\n    for (let i = 0; i < 10; i++) {\r\n        zombies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: canvas.height,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            size: Math.random() * 30 + 20\r\n        });\r\n    }\r\n\r\n    // Initialize fog\r\n    for (let i = 0; i < 50; i++) {\r\n        fog.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 100 + 50,\r\n            speed: Math.random() * 0.2 + 0.1\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        // Dark, eerie sky\r\n        const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\r\n        gradient.addColorStop(0, '#0a0a1a');\r\n        gradient.addColorStop(1, '#1a0a1a');\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Moon\r\n        ctx.beginPath();\r\n        ctx.arc(canvas.width * 0.8, canvas.height * 0.2, 40, 0, Math.PI * 2);\r\n        ctx.fillStyle = 'rgba(255, 255, 200, 0.8)';\r\n        ctx.fill();\r\n\r\n        // Draw graves\r\n        ctx.fillStyle = '#333';\r\n        graves.forEach(grave => {\r\n            ctx.fillRect(grave.x, grave.y, grave.width, grave.height);\r\n            ctx.fillStyle = '#222';\r\n            ctx.fillRect(grave.x + grave.width * 0.1, grave.y, grave.width * 0.8, grave.height * 0.1);\r\n        });\r\n\r\n        // Draw zombies\r\n        zombies.forEach(zombie => {\r\n            ctx.beginPath();\r\n            ctx.arc(zombie.x, zombie.y - zombie.size, zombie.size * 0.5, 0, Math.PI * 2);\r\n            ctx.fillStyle = '#3a5';\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(zombie.x, zombie.y - zombie.size);\r\n            ctx.lineTo(zombie.x - zombie.size * 0.5, zombie.y);\r\n            ctx.lineTo(zombie.x + zombie.size * 0.5, zombie.y);\r\n            ctx.closePath();\r\n            ctx.fillStyle = '#3a5';\r\n            ctx.fill();\r\n\r\n            zombie.y -= zombie.speed;\r\n            if (zombie.y < canvas.height * 0.7) {\r\n                zombie.y = canvas.height;\r\n                zombie.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n\r\n        // Draw fog\r\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';\r\n        fog.forEach(particle => {\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            ctx.fill();\r\n\r\n            particle.x += particle.speed;\r\n            if (particle.x > canvas.width + particle.radius) {\r\n                particle.x = -particle.radius;\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const bloodRain = (canvas, ctx) => {\r\n    const drops = [];\r\n    const splats = [];\r\n\r\n    for (let i = 0; i < 200; i++) {\r\n        drops.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            length: Math.random() * 20 + 10,\r\n            speed: Math.random() * 5 + 5\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(20, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw rain\r\n        ctx.strokeStyle = '#800';\r\n        ctx.lineWidth = 1;\r\n        drops.forEach(drop => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(drop.x, drop.y);\r\n            ctx.lineTo(drop.x, drop.y + drop.length);\r\n            ctx.stroke();\r\n\r\n            drop.y += drop.speed;\r\n\r\n            if (drop.y > canvas.height) {\r\n                drop.y = 0;\r\n                drop.x = Math.random() * canvas.width;\r\n\r\n                // Create a splat\r\n                splats.push({\r\n                    x: drop.x,\r\n                    y: canvas.height,\r\n                    size: Math.random() * 5 + 2,\r\n                    opacity: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        // Draw splats\r\n        splats.forEach((splat, index) => {\r\n            ctx.beginPath();\r\n            ctx.arc(splat.x, splat.y, splat.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(128, 0, 0, ${splat.opacity})`;\r\n            ctx.fill();\r\n\r\n            splat.opacity -= 0.005;\r\n            if (splat.opacity <= 0) {\r\n                splats.splice(index, 1);\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nexport const creepyCrawlies = (canvas, ctx) => {\r\n    const bugs = [];\r\n    const webNodes = [];\r\n\r\n    for (let i = 0; i < 50; i++) {\r\n        bugs.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 5 + 2,\r\n            speedX: Math.random() * 2 - 1,\r\n            speedY: Math.random() * 2 - 1\r\n        });\r\n    }\r\n\r\n    for (let i = 0; i < 20; i++) {\r\n        webNodes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw web\r\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\r\n        ctx.beginPath();\r\n        webNodes.forEach((node, index) => {\r\n            webNodes.slice(index + 1).forEach(otherNode => {\r\n                ctx.moveTo(node.x, node.y);\r\n                ctx.lineTo(otherNode.x, otherNode.y);\r\n            });\r\n        });\r\n        ctx.stroke();\r\n\r\n        // Draw and move bugs\r\n        ctx.fillStyle = '#400';\r\n        bugs.forEach(bug => {\r\n            ctx.beginPath();\r\n            ctx.arc(bug.x, bug.y, bug.size, 0, Math.PI * 2);\r\n            ctx.fill();\r\n\r\n            bug.x += bug.speedX;\r\n            bug.y += bug.speedY;\r\n\r\n            if (bug.x < 0 || bug.x > canvas.width) bug.speedX *= -1;\r\n            if (bug.y < 0 || bug.y > canvas.height) bug.speedY *= -1;\r\n\r\n            // Occasionally change direction\r\n            if (Math.random() < 0.01) {\r\n                bug.speedX = Math.random() * 2 - 1;\r\n                bug.speedY = Math.random() * 2 - 1;\r\n            }\r\n        });\r\n    };\r\n};","import React, { useRef, useEffect, useCallback } from 'react';\r\nimport {\r\n    starryNight, floatingBubbles,\r\n    gradientWave, particleNetwork, galaxySpiral,\r\n    rainbowWaves, geometricShapes, fireflies,\r\n    matrixRain, quantumField, electricStorm,\r\n    cosmicDust, neonPulse, auroraBorealis, oceanWaves,\r\n    neuralNetwork,\r\n    dnaHelix, snowFall, realisticRain, autumnLeaves, realisticClouds, fireflyForest, fallingFoodFiesta,\r\n    hauntedForest,\r\n    ghostlyApparitions,\r\n    spiderwebOverlay,\r\n    undeadGraveyard,\r\n    bloodRain,\r\n    creepyCrawlies,\r\n} from './backgroundAnimations';\r\n\r\nconst AnimatedBackground = ({ animationName, fallbackAnimation = 'geometricShapes', fps = 60, style }) => {\r\n    const canvasRef = useRef(null);\r\n    const animationRef = useRef(null);\r\n\r\n    const setupCanvas = useCallback(() => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n\r\n        const animations = {\r\n            starryNight, floatingBubbles, gradientWave, particleNetwork, galaxySpiral,\r\n            rainbowWaves, geometricShapes, fireflies, matrixRain, quantumField,\r\n            electricStorm, cosmicDust, neonPulse, auroraBorealis, oceanWaves,\r\n            neuralNetwork, dnaHelix, snowFall, realisticRain, realisticClouds,\r\n            fireflyForest, autumnLeaves, fallingFoodFiesta,  hauntedForest,\r\n            ghostlyApparitions,\r\n            spiderwebOverlay,\r\n            undeadGraveyard,\r\n            bloodRain,\r\n            creepyCrawlies,\r\n        };\r\n\r\n        let animation = animations[animationName];\r\n\r\n        if (!animation) {\r\n            console.warn(`Animation \"${animationName}\" not found. Using fallback animation.`);\r\n            animation = animations[fallbackAnimation] || animations.geometricShapes;\r\n        }\r\n\r\n        return animation(canvas, ctx);\r\n    }, [animationName, fallbackAnimation]);\r\n\r\n    useEffect(() => {\r\n        const animate = () => {\r\n            const animation = setupCanvas();\r\n            let lastTime = 0;\r\n            const frameInterval = 1000 / fps;\r\n\r\n            const loop = (currentTime) => {\r\n                animationRef.current = requestAnimationFrame(loop);\r\n\r\n                const deltaTime = currentTime - lastTime;\r\n                if (deltaTime >= frameInterval) {\r\n                    lastTime = currentTime - (deltaTime % frameInterval);\r\n                    animation();\r\n                }\r\n            };\r\n\r\n            animationRef.current = requestAnimationFrame(loop);\r\n        };\r\n\r\n        animate();\r\n\r\n        const handleResize = () => {\r\n            if (canvasRef.current) {\r\n                canvasRef.current.width = window.innerWidth;\r\n                canvasRef.current.height = window.innerHeight;\r\n                setupCanvas();\r\n            }\r\n        };\r\n\r\n        window.addEventListener('resize', handleResize);\r\n\r\n        return () => {\r\n            if (animationRef.current) {\r\n                cancelAnimationFrame(animationRef.current);\r\n            }\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n    }, [fps, setupCanvas]);\r\n\r\n    return (\r\n        <canvas\r\n            ref={canvasRef}\r\n            style={{\r\n                position: 'fixed',\r\n                top: 0,\r\n                left: 0,\r\n                width: '100%',\r\n                height: '100%',\r\n                zIndex: -1,\r\n                ...style\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport {\r\n    AnimatedBackground,\r\n    starryNight,\r\n    floatingBubbles,\r\n    gradientWave,\r\n    particleNetwork,\r\n    galaxySpiral,\r\n    rainbowWaves,\r\n    geometricShapes,\r\n    fireflies,\r\n    matrixRain,\r\n    quantumField,\r\n    electricStorm,\r\n    cosmicDust,\r\n    neonPulse,\r\n    auroraBorealis,\r\n    fallingFoodFiesta,\r\n    hauntedForest,\r\n    ghostlyApparitions,\r\n    spiderwebOverlay,\r\n    undeadGraveyard,\r\n    bloodRain,\r\n    creepyCrawlies,\r\n\r\n\r\n\r\n\r\n};"],"names":["starryNight","canvas","ctx","stars","i","push","x","Math","random","width","y","height","radius","vx","floor","vy","twinkle","fillStyle","fillRect","forEach","star","opacity","abs","sin","beginPath","arc","PI","concat","fill","floatingBubbles","bubbles","speed","color","bubble","strokeStyle","stroke","gradientWave","time","gradient","createLinearGradient","addColorStop","moveTo","lineTo","lineWidth","particleNetwork","particles","particle","length","j","dx","dy","distance","sqrt","galaxySpiral","arguments","undefined","starCount","angle","cos","initializeStars","rotation","save","translate","rotate","drawStars","restore","rainbowWaves","colors","auroraBorealis","colorStops","pos","_loop","stop","closePath","neonPulse","circles","phase","circle","glow","createRadialGradient","cosmicDust","size","speedX","speedY","electricStorm","bolts","points","life","createBolt","bolt","index","splice","quantumField","hue","otherParticle","geometricShapes","shapes","type","clearRect","shape","fireflies","brightness","firefly","max","min","matrixRain","columns","drops","characters","font","text","fillText","dnaHelix","t","r","neuralNetwork","nodes","connections","backgroundGradient","node","_ref","_ref2","_slicedToArray","oceanWaves","skyGradient","sun","clouds","sunGradient","cloud","snowFall","snowflakes","moon","mountains","moonGradient","mountain","point","flake","fireflyForest","trees","angleSpeed","glowIntensity","tree","fly","Date","now","realisticClouds","gradientHeight","createCloud","particleCount","createSkyGradient","sunRadius","autumnLeaves","loadedCount","leaves","leafColors","leafImages","leafImagesLoaded","imagesLoaded","src","img","Image","onload","onerror","amplitude","imageIndex","leaf","drawImage","ellipse","drawLeaf","realisticRain","raindrops","splashes","drop","splash","fallingFoodFiesta","foodItems","foodTypes","g","b","colorIndex","nextColorIndex","colorT","emoji","rotationSpeed","color1","color2","currentColor","round","filter","item","textAlign","textBaseline","strokeText","hauntedForest","fog","ghostlyApparitions","ghosts","ghost","bezierCurveTo","spiderwebOverlay","webs","web","drawWeb","undeadGraveyard","graves","zombies","grave","zombie","bloodRain","splats","splat","creepyCrawlies","bugs","webNodes","slice","otherNode","bug","AnimatedBackground","animationName","_ref$fallbackAnimatio","fallbackAnimation","_ref$fps","fps","style","canvasRef","useRef","animationRef","setupCanvas","useCallback","current","getContext","window","innerWidth","innerHeight","animations","animation","console","warn","useEffect","lastTime","frameInterval","requestAnimationFrame","loop","currentTime","deltaTime","handleResize","addEventListener","cancelAnimationFrame","removeEventListener","React","createElement","ref","_objectSpread","position","top","left","zIndex"],"mappings":"8jEAEO,IAAMA,EAAc,SAACC,EAAQC,GAEhC,IADA,IAAMC,EAAQ,GACLC,EAAI,EAAGA,EAAI,IAAKA,IACrBD,EAAME,KAAK,CACPC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BC,OAAwB,EAAhBL,KAAKC,SACbK,GAAIN,KAAKO,MAAsB,GAAhBP,KAAKC,UAAiB,GACrCO,GAAIR,KAAKO,MAAsB,GAAhBP,KAAKC,UAAiB,GACrCQ,QAAST,KAAKC,WAItB,OAAO,WACHN,EAAIe,UAAY,wBAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QACxCT,EAAIe,UAAY,OAChBd,EAAMgB,SAAQ,SAAAC,GACVA,EAAKJ,SAAW,IAChB,IAAMK,EAAUd,KAAKe,IAAIf,KAAKgB,IAAIH,EAAKJ,UACvCd,EAAIsB,YACJtB,EAAIuB,IAAIL,EAAKd,EAAGc,EAAKV,EAAGU,EAAKR,OAAQ,EAAG,EAAIL,KAAKmB,IACjDxB,EAAIe,UAAS,uBAAAU,OAA0BN,EAAU,KACjDnB,EAAI0B,OAEJR,EAAKd,GAAKc,EAAKP,GAAK,GACpBO,EAAKV,GAAKU,EAAKL,GAAK,IAEhBK,EAAKd,EAAI,GAAKc,EAAKd,EAAIL,EAAOQ,SAAOW,EAAKP,IAAMO,EAAKP,KACrDO,EAAKV,EAAI,GAAKU,EAAKV,EAAIT,EAAOU,UAAQS,EAAKL,IAAMK,EAAKL,GAC9D,IAER,EAEac,EAAkB,SAAC5B,EAAQC,GAEpC,IADA,IAAM4B,EAAU,GACP1B,EAAI,EAAGA,EAAI,GAAIA,IACpB0B,EAAQzB,KAAK,CACTC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BC,OAAwB,GAAhBL,KAAKC,SAAgB,EAC7BuB,MAAuB,GAAhBxB,KAAKC,SAAiB,GAC7BwB,MAAK,QAAAL,OAA0B,IAAhBpB,KAAKC,SAAc,sBAI1C,OAAO,WACHN,EAAIe,UAAY,wBAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAExCmB,EAAQX,SAAQ,SAAAc,GACZ/B,EAAIsB,YACJtB,EAAIuB,IAAIQ,EAAO3B,EAAG2B,EAAOvB,EAAGuB,EAAOrB,OAAQ,EAAa,EAAVL,KAAKmB,IACnDxB,EAAIe,UAAYgB,EAAOD,MACvB9B,EAAI0B,OACJ1B,EAAIgC,YAAc,2BAClBhC,EAAIiC,SAEJF,EAAOvB,GAAKuB,EAAOF,MACnBE,EAAO3B,GAAiC,GAA5BC,KAAKgB,IAAe,IAAXU,EAAOvB,GACxBuB,EAAOvB,EAAIuB,EAAOrB,OAAS,IAC3BqB,EAAOvB,EAAIT,EAAOU,OAASsB,EAAOrB,OAClCqB,EAAO3B,EAAIC,KAAKC,SAAWP,EAAOQ,MAE1C,IAER,EAEa2B,EAAe,SAACnC,EAAQC,GACjC,IAAImC,EAAO,EAEX,OAAO,WACHA,GAAQ,IAER,IAAMC,EAAWpC,EAAIqC,qBAAqB,EAAG,EAAGtC,EAAOQ,MAAOR,EAAOU,QACrE2B,EAASE,aAAa,EAACb,OAAAA,OAAgB,GAAPU,EAAY,oBAC5CC,EAASE,aAAa,EAAC,OAAAb,QAAiB,GAAPU,EAAY,KAAO,oBAEpDnC,EAAIe,UAAYqB,EAChBpC,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAExC,IAAK,IAAIP,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxBF,EAAIsB,YACJtB,EAAIuC,OAAO,EAAmB,IAAhBxC,EAAOU,OAAgBP,EAAyB,GAArBG,KAAKgB,IAAIc,EAAOjC,IACzD,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAOQ,MAAOH,GAAK,GACnCJ,EAAIwC,OAAOpC,EAAmB,IAAhBL,EAAOU,OAAgBP,EAAoC,GAAhCG,KAAKgB,IAAIc,EAAOjC,EAAQ,IAAJE,IAEjEJ,EAAIgC,YAAW,uBAAAP,OAA0B,GAAU,IAAJvB,EAAW,KAC1DF,EAAIyC,UAAY,EAChBzC,EAAIiC,QACR,EAER,EAEaS,EAAkB,SAAC3C,EAAQC,GAKpC,IAJA,IAAM2C,EAAY,GAITzC,EAAI,EAAGA,EAHM,IAGaA,IAC/ByC,EAAUxC,KAAK,CACXC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BC,OAAwB,EAAhBL,KAAKC,SAAe,EAC5BK,GAAoB,IAAhBN,KAAKC,SAAiB,IAC1BO,GAAoB,IAAhBR,KAAKC,SAAiB,IAC1BwB,MAAK,OAAAL,OAAyB,IAAhBpB,KAAKC,SAAc,iBAIzC,OAAO,WACHN,EAAIe,UAAY,wBAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAExCkC,EAAU1B,SAAQ,SAAA2B,GACdA,EAASxC,GAAKwC,EAASjC,GACvBiC,EAASpC,GAAKoC,EAAS/B,IAEnB+B,EAASxC,EAAI,GAAKwC,EAASxC,EAAIL,EAAOQ,SAAOqC,EAASjC,KAAO,IAC7DiC,EAASpC,EAAI,GAAKoC,EAASpC,EAAIT,EAAOU,UAAQmC,EAAS/B,KAAO,GAElEb,EAAIsB,YACJtB,EAAIuB,IAAIqB,EAASxC,EAAGwC,EAASpC,EAAGoC,EAASlC,OAAQ,EAAa,EAAVL,KAAKmB,IACzDxB,EAAIe,UAAY6B,EAASd,MACzB9B,EAAI0B,MACR,IAEA,IAAK,IAAIxB,EAAI,EAAGA,EAAIyC,EAAUE,OAAQ3C,IAClC,IAAK,IAAI4C,EAAI5C,EAAI,EAAG4C,EAAIH,EAAUE,OAAQC,IAAK,CAC3C,IAAMC,EAAKJ,EAAUzC,GAAGE,EAAIuC,EAAUG,GAAG1C,EACnC4C,EAAKL,EAAUzC,GAAGM,EAAImC,EAAUG,GAAGtC,EACnCyC,EAAW5C,KAAK6C,KAAKH,EAAKA,EAAKC,EAAKA,GAEtCC,EApCI,MAqCJjD,EAAIsB,YACJtB,EAAIuC,OAAOI,EAAUzC,GAAGE,EAAGuC,EAAUzC,GAAGM,GACxCR,EAAIwC,OAAOG,EAAUG,GAAG1C,EAAGuC,EAAUG,GAAGtC,GACxCR,EAAIgC,YAAW,uBAAAP,OAA0B,EAAIwB,EAxCzC,IAwCkE,KACtEjD,EAAIyC,UAAY,GAChBzC,EAAIiC,SAEZ,EAGZ,EACakB,EAAe,SAACpD,EAAQC,GAAwB,IAAnB6B,EAAKuB,UAAAP,OAAA,QAAAQ,IAAAD,UAAA,GAAAA,UAAA,GAAG,KACxCnD,EAGN,SAAyBF,EAAQuD,GAE7B,IADA,IAAMrD,EAAQ,GACLC,EAAI,EAAGA,EAAIoD,EAAWpD,IAAK,CAChC,IAAM+C,EAAW5C,KAAKC,SAAWP,EAAOQ,MAAQ,GAC1CgD,EAAQlD,KAAKC,SAAWD,KAAKmB,GAAK,EACxCvB,EAAME,KAAK,CACPC,EAAGC,KAAKmD,IAAID,GAASN,EACrBzC,EAAGH,KAAKgB,IAAIkC,GAASN,EACrBvC,OAAwB,IAAhBL,KAAKC,SAAiB,GAC9BwB,MAAKL,OAAAA,OAAyB,GAAhBpB,KAAKC,SAAgB,IAAgB,eACnDiD,MAAOA,EACPN,SAAUA,GAElB,CACA,OAAOhD,CACX,CAlBcwD,CAAgB1D,EAAQ,KAClC2D,EAAW,EAkCf,OAAO,WACH1D,EAAIe,UAAY,wBAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAExCT,EAAI2D,OACJ3D,EAAI4D,UAAU7D,EAAOQ,MAAQ,EAAGR,EAAOU,OAAS,GAChDT,EAAI6D,OAAOH,GArBf,SAAmB1D,EAAKC,EAAOyD,EAAU7B,GACrC5B,EAAMgB,SAAQ,SAAAC,GACV,IAAMd,EAAIC,KAAKmD,IAAItC,EAAKqC,OAASrC,EAAK+B,SAChCzC,EAAIH,KAAKgB,IAAIH,EAAKqC,OAASrC,EAAK+B,SAEtCjD,EAAIsB,YACJtB,EAAIuB,IAAInB,EAAGI,EAAGU,EAAKR,OAAQ,EAAa,EAAVL,KAAKmB,IACnCxB,EAAIe,UAAYG,EAAKY,MACrB9B,EAAI0B,OAGJR,EAAKqC,OAAS1B,GAAyB,KAAhBX,EAAK+B,SAChC,GACJ,CAUIa,CAAU9D,EAAKC,EAAOyD,EAAU7B,GAEhC7B,EAAI+D,UAEJL,GAAY7B,EAEpB,EACamC,EAAe,SAACjE,EAAQC,GACjC,IAAImC,EAAO,EAEL8B,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAElF,OAAO,WACHjE,EAAIe,UAAY,sBAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QACxC0B,GAAQ,IAER,IAAK,IAAIjC,EAAI,EAAGA,EARN,EAQiBA,IAAK,CAC5BF,EAAIsB,YACJtB,EAAIuC,OAAO,EAAGxC,EAAOU,OAAS,GAE9B,IAAK,IAAIL,EAAI,EAAGA,EAAIL,EAAOQ,MAAOH,IAAK,CACnC,IAAMI,EAA0C,GAAtCH,KAAKgB,IAAQ,IAAJjB,EAAW+B,EAAW,GAAJjC,GACW,GAA5CG,KAAKmD,IAAQ,IAAJpD,EAAkB,GAAP+B,EAAiB,GAAJjC,GACjCH,EAAOU,OAAS,EACpBT,EAAIwC,OAAOpC,EAAGI,EAClB,CAEAR,EAAIgC,YAAciC,EAAO/D,EAAI+D,EAAOpB,QACpC7C,EAAIyC,UAAY,EAChBzC,EAAIiC,QACR,EAER,EACaiC,EAAiB,SAACnE,EAAQC,GACnC,IAAImC,EAAO,EACLgC,EAAa,CACf,CAAEC,IAAK,EAAGtC,MAAO,0BACjB,CAAEsC,IAAK,GAAKtC,MAAO,0BACnB,CAAEsC,IAAK,EAAGtC,MAAO,2BAGrB,OAAO,WACH9B,EAAIe,UAAY,sBAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QACxC0B,GAAQ,KAER,IAFc,IAAAkC,EAAAA,WAGV,IAAMjC,EAAWpC,EAAIqC,qBAAqB,EAAG,EAAGtC,EAAOQ,MAAO,GAC9D4D,EAAWlD,SAAQ,SAAAqD,GACflC,EAASE,aAAagC,EAAKF,IAAKE,EAAKxC,MACzC,IAEA9B,EAAIsB,YACJ,IAAK,IAAIlB,EAAI,EAAGA,EAAIL,EAAOQ,MAAOH,IAAK,CACnC,IAAMI,EAAoC,GAAhCH,KAAKgB,IAAQ,IAAJjB,EAAW+B,EAAOjC,GACK,GAAtCG,KAAKgB,IAAQ,IAAJjB,EAAkB,IAAP+B,EAAajC,GACjCH,EAAOU,QAAU,GAAU,GAAJP,GAC3BF,EAAIwC,OAAOpC,EAAGI,EAClB,CACAR,EAAIwC,OAAOzC,EAAOQ,MAAOR,EAAOU,QAChCT,EAAIwC,OAAO,EAAGzC,EAAOU,QACrBT,EAAIuE,YAEJvE,EAAIe,UAAYqB,EAChBpC,EAAI0B,QAlBCxB,EAAI,EAAGA,EAAI,EAAGA,IAAGmE,IAqBlC,EACaG,EAAY,SAACzE,EAAQC,GAI9B,IAHA,IAAMyE,EAAU,GACVR,EAAS,CAAC,UAAW,UAAW,UAAW,WAExC/D,EAAI,EAAGA,EAAI,GAAIA,IACpBuE,EAAQtE,KAAK,CACTC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BC,OAAwB,GAAhBL,KAAKC,SAAgB,GAC7BwB,MAAOmC,EAAO5D,KAAKO,MAAMP,KAAKC,SAAW2D,EAAOpB,SAChD6B,MAAOrE,KAAKC,SAAWD,KAAKmB,GAAK,IAIzC,OAAO,WACHxB,EAAIe,UAAY,qBAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAExCgE,EAAQxD,SAAQ,SAAA0D,GACZ,IAAMC,EAAgC,GAAzBvE,KAAKgB,IAAIsD,EAAOD,OAAc,GACrCtC,EAAWpC,EAAI6E,qBACjBF,EAAOvE,EAAGuE,EAAOnE,EAAG,EACpBmE,EAAOvE,EAAGuE,EAAOnE,EAAGmE,EAAOjE,QAE/B0B,EAASE,aAAa,EAAGqC,EAAO7C,OAChCM,EAASE,aAAa,EAAG,oBAEzBtC,EAAIsB,YACJtB,EAAIuB,IAAIoD,EAAOvE,EAAGuE,EAAOnE,EAAGmE,EAAOjE,OAASkE,EAAM,EAAa,EAAVvE,KAAKmB,IAC1DxB,EAAIe,UAAYqB,EAChBpC,EAAI0B,OAEJiD,EAAOD,OAAS,GACpB,IAER,EACaI,EAAa,SAAC/E,EAAQC,GAI/B,IAHA,IAAM2C,EAAY,GAGTzC,EAAI,EAAGA,EAFM,IAEaA,IAC/ByC,EAAUxC,KAAK,CACXC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BsE,KAAsB,EAAhB1E,KAAKC,SAAe,GAC1B0E,OAAgC,IAAvB3E,KAAKC,SAAW,IACzB2E,OAAgC,IAAvB5E,KAAKC,SAAW,IACzBwB,MAAK,OAAAL,OAAyB,GAAhBpB,KAAKC,SAAgB,IAAG,kBAI9C,OAAO,WACHN,EAAIe,UAAY,uBAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAExCkC,EAAU1B,SAAQ,SAAA2B,GACd5C,EAAIsB,YACJtB,EAAIuB,IAAIqB,EAASxC,EAAGwC,EAASpC,EAAGoC,EAASmC,KAAM,EAAa,EAAV1E,KAAKmB,IACvDxB,EAAIe,UAAY6B,EAASd,MACzB9B,EAAI0B,OAEJkB,EAASxC,GAAKwC,EAASoC,OACvBpC,EAASpC,GAAKoC,EAASqC,QAEnBrC,EAASxC,EAAI,GAAKwC,EAASxC,EAAIL,EAAOQ,SAAOqC,EAASoC,SAAW,IACjEpC,EAASpC,EAAI,GAAKoC,EAASpC,EAAIT,EAAOU,UAAQmC,EAASqC,SAAW,EAC1E,IAER,EACaC,EAAgB,SAACnF,EAAQC,GAElC,IAAMmF,EAAQ,GAqBd,OAAO,WACHnF,EAAIe,UAAY,sBAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAGpCJ,KAAKC,SAAW,IAAK6E,EAAMhF,KAxBnC,WAMI,IALA,IACIC,EADWC,KAAKC,SAAWP,EAAOQ,MAElCC,EAAI,EACF4E,EAAS,CAAC,CAAEhF,EAAAA,EAAGI,EAAAA,IAEdA,EAAIT,EAAOU,QACdL,GAA6B,IAAvBC,KAAKC,SAAW,IACtBE,GAAqB,GAAhBH,KAAKC,SAAgB,GAC1B8E,EAAOjF,KAAK,CAAEC,EAAAA,EAAGI,EAAAA,IAGrB,MAAO,CACH4E,OAAAA,EACAC,KAAM,EAAoB,EAAhBhF,KAAKC,SACfC,MAAuB,EAAhBF,KAAKC,SAAe,EAEnC,CAOwCgF,IAEpCH,EAAMlE,SAAQ,SAACsE,EAAMC,GACjBxF,EAAIsB,YACJtB,EAAIuC,OAAOgD,EAAKH,OAAO,GAAGhF,EAAGmF,EAAKH,OAAO,GAAG5E,GAC5C,IAAK,IAAIN,EAAI,EAAGA,EAAIqF,EAAKH,OAAOvC,OAAQ3C,IACpCF,EAAIwC,OAAO+C,EAAKH,OAAOlF,GAAGE,EAAGmF,EAAKH,OAAOlF,GAAGM,GAEhDR,EAAIgC,YAAW,uBAAAP,OAA0B8D,EAAKF,KAAO,GAAK,KAC1DrF,EAAIyC,UAAY8C,EAAKhF,MACrBP,EAAIiC,SAEJsD,EAAKF,MAAQ,GACTE,EAAKF,MAAQ,GAAGF,EAAMM,OAAOD,EAAO,EAC5C,IAER,EAEaE,EAAe,SAAC3F,EAAQC,GAIjC,IAHA,IAAM2C,EAAY,GAGTzC,EAAI,EAAGA,EAFM,IAEaA,IAC/ByC,EAAUxC,KAAK,CACXC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BsE,KAAsB,EAAhB1E,KAAKC,SAAe,EAC1B0E,OAAgC,GAAvB3E,KAAKC,SAAW,IACzB2E,OAAgC,GAAvB5E,KAAKC,SAAW,IACzBqF,IAAqB,IAAhBtF,KAAKC,WAIlB,OAAO,WACHN,EAAIe,UAAY,sBAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAExCkC,EAAU1B,SAAQ,SAAA2B,GACdA,EAASxC,GAAKwC,EAASoC,OACvBpC,EAASpC,GAAKoC,EAASqC,QAEnBrC,EAASxC,EAAI,GAAKwC,EAASxC,EAAIL,EAAOQ,SAAOqC,EAASoC,SAAW,IACjEpC,EAASpC,EAAI,GAAKoC,EAASpC,EAAIT,EAAOU,UAAQmC,EAASqC,SAAW,GAEtEjF,EAAIsB,YACJtB,EAAIuB,IAAIqB,EAASxC,EAAGwC,EAASpC,EAAGoC,EAASmC,KAAM,EAAa,EAAV1E,KAAKmB,IACvDxB,EAAIe,UAASU,QAAAA,OAAWmB,EAAS+C,IAAsB,qBACvD3F,EAAI0B,OAEJiB,EAAU1B,SAAQ,SAAA2E,GACd,IAAM7C,EAAKH,EAASxC,EAAIwF,EAAcxF,EAChC4C,EAAKJ,EAASpC,EAAIoF,EAAcpF,EAChCyC,EAAW5C,KAAK6C,KAAKH,EAAKA,EAAKC,EAAKA,GAEtCC,EAAW,MACXjD,EAAIsB,YACJtB,EAAIuC,OAAOK,EAASxC,EAAGwC,EAASpC,GAChCR,EAAIwC,OAAOoD,EAAcxF,EAAGwF,EAAcpF,GAC1CR,EAAIgC,YAAWP,QAAAA,QAAYmB,EAAS+C,IAAMC,EAAcD,KAAO,EAAC,iBAAAlE,OAAgB,EAAIwB,EAAW,IAAM,KACrGjD,EAAIiC,SAEZ,IAEAW,EAAS+C,KAAO/C,EAAS+C,IAAM,IAAO,GAC1C,IAER,EAEaE,EAAkB,SAAC9F,EAAQC,GAIpC,IAHA,IAAM8F,EAAS,GAGN5F,EAAI,EAAGA,EAFG,GAEaA,IAC5B4F,EAAO3F,KAAK,CACRC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BsE,KAAsB,GAAhB1E,KAAKC,SAAgB,GAC3ByF,KAAM1F,KAAKO,MAAsB,EAAhBP,KAAKC,UACtBoD,SAAUrD,KAAKC,SAAWD,KAAKmB,GAAK,EACpCK,MAAuB,GAAhBxB,KAAKC,SAAiB,GAC7BwB,MAAK,OAAAL,OAAyB,IAAhBpB,KAAKC,SAAc,iBAIzC,OAAO,WACHN,EAAIgG,UAAU,EAAG,EAAGjG,EAAOQ,MAAOR,EAAOU,QAEzCqF,EAAO7E,SAAQ,SAAAgF,GAMX,OALAjG,EAAI2D,OACJ3D,EAAI4D,UAAUqC,EAAM7F,EAAG6F,EAAMzF,GAC7BR,EAAI6D,OAAOoC,EAAMvC,UACjB1D,EAAIe,UAAYkF,EAAMnE,MAEdmE,EAAMF,MACV,KAAK,EACD/F,EAAIgB,UAAUiF,EAAMlB,KAAO,GAAIkB,EAAMlB,KAAO,EAAGkB,EAAMlB,KAAMkB,EAAMlB,MACjE,MACJ,KAAK,EACD/E,EAAIsB,YACJtB,EAAIuB,IAAI,EAAG,EAAG0E,EAAMlB,KAAO,EAAG,EAAa,EAAV1E,KAAKmB,IACtCxB,EAAI0B,OACJ,MACJ,KAAK,EACD1B,EAAIsB,YACJtB,EAAIuC,OAAO,GAAI0D,EAAMlB,KAAO,GAC5B/E,EAAIwC,OAAOyD,EAAMlB,KAAO,EAAGkB,EAAMlB,KAAO,GACxC/E,EAAIwC,QAAQyD,EAAMlB,KAAO,EAAGkB,EAAMlB,KAAO,GACzC/E,EAAIuE,YACJvE,EAAI0B,OAIZ1B,EAAI+D,UAEJkC,EAAMvC,UAA0B,IAAduC,EAAMpE,MACxBoE,EAAMzF,GAAKyF,EAAMpE,MACboE,EAAMzF,EAAIT,EAAOU,OAASwF,EAAMlB,OAChCkB,EAAMzF,GAAKyF,EAAMlB,KACjBkB,EAAM7F,EAAIC,KAAKC,SAAWP,EAAOQ,MAEzC,IAER,EAEa2F,EAAY,SAACnG,EAAQC,GAI9B,IAHA,IAAMkG,EAAY,GAGThG,EAAI,EAAGA,EAFK,IAEaA,IAC9BgG,EAAU/F,KAAK,CACXC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BsE,KAAsB,EAAhB1E,KAAKC,SAAe,EAC1BuB,MAAuB,GAAhBxB,KAAKC,SAAiB,GAC7B6F,WAAY9F,KAAKC,SACjBiD,MAAOlD,KAAKC,SAAWD,KAAKmB,GAAK,IAIzC,OAAO,WACHxB,EAAIe,UAAY,qBAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAExCyF,EAAUjF,SAAQ,SAAAmF,GACdA,EAAQD,YAA8B,GAAhB9F,KAAKC,SAAiB,IAC5C8F,EAAQD,WAAa9F,KAAKgG,IAAI,EAAGhG,KAAKiG,IAAI,EAAGF,EAAQD,aAErDnG,EAAIsB,YACJtB,EAAIuB,IAAI6E,EAAQhG,EAAGgG,EAAQ5F,EAAG4F,EAAQrB,KAAM,EAAa,EAAV1E,KAAKmB,IACpDxB,EAAIe,UAASU,uBAAAA,OAA0B2E,EAAQD,WAAa,KAC5DnG,EAAI0B,OAEJ0E,EAAQhG,GAAKC,KAAKmD,IAAI4C,EAAQ7C,OAAS6C,EAAQvE,MAC/CuE,EAAQ5F,GAAKH,KAAKgB,IAAI+E,EAAQ7C,OAAS6C,EAAQvE,OAE3CuE,EAAQhG,EAAI,GAAKgG,EAAQhG,EAAIL,EAAOQ,OAAS6F,EAAQ5F,EAAI,GAAK4F,EAAQ5F,EAAIT,EAAOU,UACjF2F,EAAQ7C,OAASlD,KAAKmB,IAGtBnB,KAAKC,SAAW,MAChB8F,EAAQ7C,MAAQlD,KAAKC,SAAWD,KAAKmB,GAAK,EAElD,IAER,EAEa+E,EAAa,SAACxG,EAAQC,GAI/B,IAHA,IAAMwG,EAAUnG,KAAKO,MAAMb,EAAOQ,MAAQ,IACpCkG,EAAQ,GAELvG,EAAI,EAAGA,EAAIsG,EAAStG,IACzBuG,EAAMvG,GAAKG,KAAKC,SAAWP,EAAOU,OAGtC,IAAMiG,EAAa,wFAEnB,OAAO,WACH1G,EAAIe,UAAY,sBAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAExCT,EAAIe,UAAY,OAChBf,EAAI2G,KAAO,iBAEX,IAAK,IAAIzG,EAAI,EAAGA,EAAIuG,EAAM5D,OAAQ3C,IAAK,CACnC,IAAM0G,EAAOF,EAAWrG,KAAKO,MAAsB8F,GAAhBrG,KAAKC,WACxCN,EAAI6G,SAASD,EAAU,GAAJ1G,EAAmB,GAAXuG,EAAMvG,IAElB,GAAXuG,EAAMvG,GAAUH,EAAOU,QAAUJ,KAAKC,SAAW,OACjDmG,EAAMvG,GAAK,GAEfuG,EAAMvG,IAAM,EAChB,EAER,EAGa4G,EAAW,SAAC/G,EAAQC,GAC7B,IAII+G,EAAI,EAER,OAAO,WACH/G,EAAIe,UAAY,qBAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAExCT,EAAI2D,OACJ3D,EAAI4D,UAAU7D,EAAOQ,MAAQ,EAAGR,EAAOU,OAAS,GAEhD,IAAK,IAAIP,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxBF,EAAIsB,YACJ,IAAK,IAAIlB,GAAKL,EAAOQ,MAAQ,EAAGH,EAAIL,EAAOQ,MAAQ,EAAGH,GAAK,GAAI,CAC3D,IACM4G,EAhBC,IACD,GAcI3G,KAAKgB,IAAQ,IAAJjB,EAAW2G,EAAI7G,EAAIG,KAAKmB,IAE3CxB,EAAIwC,OAAOpC,EAAG4G,EAClB,CACAhH,EAAIgC,YAAoB,IAAN9B,EAAU,uBAAyB,uBACrDF,EAAIyC,UAAY,EAChBzC,EAAIiC,SAGJ,IAAK,IAAI7B,GAAKL,EAAOQ,MAAQ,EAAGH,EAAIL,EAAOQ,MAAQ,EAAGH,GAAK,GAAI,CAC3D,IACM4G,EA1BC,IACD,GAwBI3G,KAAKgB,IAAQ,IAAJjB,EAAW2G,EAAI7G,EAAIG,KAAKmB,IAE3CxB,EAAIe,UAAkB,IAANb,EAAU,yBAA2B,uBACrDF,EAAIsB,YACJtB,EAAIuB,IAAInB,EAAG4G,EA3BA,EA2BmB,EAAa,EAAV3G,KAAKmB,IACtCxB,EAAI0B,MACR,CACJ,CAEA1B,EAAI+D,UACJgD,GApCU,IAsClB,EAEaE,EAAgB,SAAClH,EAAQC,GAClC,IAGMkH,EAAQ,GACRC,EAAc,GAGdC,EAAqBpH,EAAIqC,qBAAqB,EAAG,EAAGtC,EAAOQ,MAAOR,EAAOU,QAC/E2G,EAAmB9E,aAAa,EAAG,WACnC8E,EAAmB9E,aAAa,EAAG,WAEnC,IAAK,IAAIpC,EAAI,EAAGA,EAXE,GAWaA,IAC3BgH,EAAM/G,KAAK,CACPC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BE,GAbM,IAaDN,KAAKC,SAAW,IACrBO,GAdM,IAcDR,KAAKC,SAAW,IACrByE,KAAsB,EAAhB1E,KAAKC,SAAe,IAKlC,IAAK,IAAIJ,EAAI,EAAGA,EAAIgH,EAAMrE,OAAQ3C,IAC9B,IAAK,IAAI4C,EAAI5C,EAAI,EAAG4C,EAAIoE,EAAMrE,OAAQC,IAC9BzC,KAAKC,SAvBa,IAwBlB6G,EAAYhH,KAAK,CAACD,EAAG4C,IAKjC,OAAO,WAEH9C,EAAIe,UAAYqG,EAChBpH,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAGxCyG,EAAMjG,SAAQ,SAACoG,EAAM7B,GACjB6B,EAAKjH,GAAKiH,EAAK1G,GACf0G,EAAK7G,GAAK6G,EAAKxG,IAEXwG,EAAKjH,EAAI,GAAKiH,EAAKjH,EAAIL,EAAOQ,SAAO8G,EAAK1G,KAAO,IACjD0G,EAAK7G,EAAI,GAAK6G,EAAK7G,EAAIT,EAAOU,UAAQ4G,EAAKxG,KAAO,GAEtDb,EAAIsB,YACJtB,EAAIuB,IAAI8F,EAAKjH,EAAGiH,EAAK7G,EAAG6G,EAAKtC,KAAM,EAAa,EAAV1E,KAAKmB,IAC3CxB,EAAIe,UAAS,OAAAU,OAAe,GAAL+D,EAAuC,gBAC9DxF,EAAI0B,OAGJ1B,EAAIsB,YACJtB,EAAIuB,IAAI8F,EAAKjH,EAAGiH,EAAK7G,EAAG6G,EAAKtC,KAAO,EAAG,EAAa,EAAV1E,KAAKmB,IAC/C,IAAMY,EAAWpC,EAAI6E,qBAAqBwC,EAAKjH,EAAGiH,EAAK7G,EAAG6G,EAAKtC,KAAMsC,EAAKjH,EAAGiH,EAAK7G,EAAG6G,EAAKtC,KAAO,GACjG3C,EAASE,aAAa,UAACb,OAAmB,GAAT+D,wBACjCpD,EAASE,aAAa,UAACb,OAAmB,GAAT+D,sBACjCxF,EAAIe,UAAYqB,EAChBpC,EAAI0B,MACR,IAGAyF,EAAYlG,SAAQ,SAAAqG,GAAY,IAAAC,EAAAC,EAAAF,EAAA,GAAVpH,EAACqH,EAAA,GAAEzE,EAACyE,EAAA,GAChBxE,EAAKmE,EAAMhH,GAAGE,EAAI8G,EAAMpE,GAAG1C,EAC3B4C,EAAKkE,EAAMhH,GAAGM,EAAI0G,EAAMpE,GAAGtC,EAE3BW,EAAU,EADCd,KAAK6C,KAAKH,EAAKA,EAAKC,EAAKA,GACX3C,KAAKgG,IAAItG,EAAOQ,MAAOR,EAAOU,QAE7DT,EAAIsB,YACJtB,EAAIuC,OAAO2E,EAAMhH,GAAGE,EAAG8G,EAAMhH,GAAGM,GAChCR,EAAIwC,OAAO0E,EAAMpE,GAAG1C,EAAG8G,EAAMpE,GAAGtC,GAChCR,EAAIgC,YAAWP,uBAAAA,OAAoC,GAAVN,EAAgB,KACzDnB,EAAIiC,QACR,IAGA,IAAK,IAAI/B,EAAI,EAAGA,EAAI,EAAGA,IACnBF,EAAIsB,YACJtB,EAAIuB,IAAIlB,KAAKC,SAAWP,EAAOQ,MAAOF,KAAKC,SAAWP,EAAOU,OAAwB,IAAhBJ,KAAKC,SAAgB,EAAa,EAAVD,KAAKmB,IAClGxB,EAAIe,UAAY,2BAChBf,EAAI0B,OAGhB,EAEa+F,EAAa,SAAC1H,EAAQC,GAC/B,IAIImC,EAAO,EAGLuF,EAAc1H,EAAIqC,qBAAqB,EAAG,EAAG,EAAmB,GAAhBtC,EAAOU,QAC7DiH,EAAYpF,aAAa,EAAG,WAC5BoF,EAAYpF,aAAa,EAAG,WAG5B,IAAMqF,EAAM,CACRvH,EAAkB,GAAfL,EAAOQ,MACVC,EAAmB,GAAhBT,EAAOU,OACVC,OAAQ,GACRkE,KAAM,IAIJgD,EAAS,CACX,CAAExH,EAAkB,GAAfL,EAAOQ,MAAaC,EAAmB,IAAhBT,EAAOU,OAAeC,OAAQ,IAC1D,CAAEN,EAAkB,GAAfL,EAAOQ,MAAaC,EAAmB,GAAhBT,EAAOU,OAAcC,OAAQ,IACzD,CAAEN,EAAkB,GAAfL,EAAOQ,MAAaC,EAAmB,GAAhBT,EAAOU,OAAcC,OAAQ,KAG7D,OAAO,WAEHV,EAAIe,UAAY2G,EAChB1H,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAuB,GAAhBR,EAAOU,QAGxCT,EAAI2D,OACJ3D,EAAIsB,YACJtB,EAAIuB,IAAIoG,EAAIvH,EAAGuH,EAAInH,EAAGmH,EAAIjH,OAAQ,EAAa,EAAVL,KAAKmB,IAC1C,IAAMqG,EAAc7H,EAAI6E,qBAAqB8C,EAAIvH,EAAGuH,EAAInH,EAAGmH,EAAIjH,OAASiH,EAAI/C,KAAM+C,EAAIvH,EAAGuH,EAAInH,EAAGmH,EAAIjH,OAASiH,EAAI/C,MACjHiD,EAAYvF,aAAa,EAAG,wBAC5BuF,EAAYvF,aAAa,GAAK,0BAC9BuF,EAAYvF,aAAa,EAAG,wBAC5BtC,EAAIe,UAAY8G,EAChB7H,EAAI0B,OACJ1B,EAAI+D,UAGJ6D,EAAO3G,SAAQ,SAAA6G,GACX9H,EAAIsB,YACJtB,EAAIuB,IAAIuG,EAAM1H,EAAG0H,EAAMtH,EAAGsH,EAAMpH,OAAQ,EAAa,EAAVL,KAAKmB,IAChDxB,EAAIe,UAAY,2BAChBf,EAAI0B,MACR,IAGA,IAAK,IAAIxB,EAAI,EAAGA,EApDF,EAoDiBA,IAAK,CAChCF,EAAIsB,YACJtB,EAAIuC,OAAO,EAAGxC,EAAOU,QAErB,IAAK,IAAIL,EAAI,EAAGA,GAAKL,EAAOQ,MAAOH,GAAK,EAAG,CACvC,IAAMI,EAxDA,GAwDIH,KAAKgB,IAvDT,IAuDajB,EAAgB+B,EAAW,GAAJjC,IAAwB,EAAQ,GAAJA,IACjEH,EAAOU,QAAUP,EAAI,IAAsB,GAAhBH,EAAOU,OA1DjC,IA2DNT,EAAIwC,OAAOpC,EAAGI,EAClB,CAEAR,EAAIwC,OAAOzC,EAAOQ,MAAOR,EAAOU,QAChC,IAAM2B,EAAWpC,EAAIqC,qBAAqB,EAAG,EAAG,EAAGtC,EAAOU,QAC1D2B,EAASE,aAAa,uBAACb,OAAuB,GAAOvB,EAhE3C,EAgE4D,UACtEkC,EAASE,aAAa,sBAACb,OAAsB,GAAOvB,EAjE1C,EAiE2D,UACrEF,EAAIe,UAAYqB,EAChBpC,EAAI0B,MACR,CAEAS,GAnEU,IAqElB,EACa4F,EAAW,SAAChI,EAAQC,GAC7B,IACMgI,EAAa,GACbZ,EAAqBpH,EAAIqC,qBAAqB,EAAG,EAAG,EAAGtC,EAAOU,QACpE2G,EAAmB9E,aAAa,EAAG,WACnC8E,EAAmB9E,aAAa,EAAG,WAgBnC,IAbA,IAAM2F,EAAO,CACT7H,EAAkB,GAAfL,EAAOQ,MACVC,EAAmB,GAAhBT,EAAOU,OACVC,OAAQ,GACRkE,KAAM,IAIJsD,EAAY,CACd,CAAE9C,OAAQ,CAAC,CAAC,EAAGrF,EAAOU,QAAS,CAAgB,GAAfV,EAAOQ,MAA6B,GAAhBR,EAAOU,QAAe,CAAgB,GAAfV,EAAOQ,MAAaR,EAAOU,SAAUqB,MAAO,WACvH,CAAEsD,OAAQ,CAAC,CAAgB,GAAfrF,EAAOQ,MAAaR,EAAOU,QAAS,CAAgB,GAAfV,EAAOQ,MAA6B,IAAhBR,EAAOU,QAAgB,CAACV,EAAOQ,MAAOR,EAAOU,SAAUqB,MAAO,YAG9H5B,EAAI,EAAGA,EApBO,IAoBaA,IAChC8H,EAAW7H,KAAK,CACZC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BE,GAA4B,KAAvBN,KAAKC,SAAW,IACrBO,GAAoB,EAAhBR,KAAKC,SAAe,GACxByE,KAAsB,EAAhB1E,KAAKC,SAAe,EAC1Ba,QAAyB,GAAhBd,KAAKC,SAAiB,KAIvC,OAAO,WACHN,EAAIe,UAAYqG,EAChBpH,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAGxCT,EAAI2D,OACJ3D,EAAIsB,YACJtB,EAAIuB,IAAI0G,EAAK7H,EAAG6H,EAAKzH,EAAGyH,EAAKvH,OAAQ,EAAa,EAAVL,KAAKmB,IAC7C,IAAM2G,EAAenI,EAAI6E,qBAAqBoD,EAAK7H,EAAG6H,EAAKzH,EAAGyH,EAAKvH,OAASuH,EAAKrD,KAAMqD,EAAK7H,EAAG6H,EAAKzH,EAAGyH,EAAKvH,OAASuH,EAAKrD,MAC1HuD,EAAa7F,aAAa,EAAG,0BAC7B6F,EAAa7F,aAAa,GAAK,4BAC/B6F,EAAa7F,aAAa,EAAG,0BAC7BtC,EAAIe,UAAYoH,EAChBnI,EAAI0B,OACJ1B,EAAI+D,UAGJmE,EAAUjH,SAAQ,SAAAmH,GACdpI,EAAIsB,YACJtB,EAAIuC,OAAO6F,EAAShD,OAAO,GAAG,GAAIgD,EAAShD,OAAO,GAAG,IACrDgD,EAAShD,OAAOnE,SAAQ,SAAAoH,GAAK,OAAIrI,EAAIwC,OAAO6F,EAAM,GAAIA,EAAM,OAC5DrI,EAAIe,UAAYqH,EAAStG,MACzB9B,EAAI0B,MACR,IAEAsG,EAAW/G,SAAQ,SAAAqH,GACfA,EAAMlI,GAAKkI,EAAM3H,GAAgC,GAA3BN,KAAKgB,IAAc,IAAViH,EAAM9H,GACrC8H,EAAM9H,GAAK8H,EAAMzH,GAEbyH,EAAM9H,EAAIT,EAAOU,SACjB6H,EAAMlI,EAAIC,KAAKC,SAAWP,EAAOQ,MACjC+H,EAAM9H,GAAK8H,EAAMvD,KACjBuD,EAAM3H,GAA6B,KAAvBN,KAAKC,SAAW,IAC5BgI,EAAMzH,GAAqB,EAAhBR,KAAKC,SAAe,IAGnCN,EAAIsB,YACJtB,EAAIuB,IAAI+G,EAAMlI,EAAGkI,EAAM9H,EAAG8H,EAAMvD,KAAM,EAAa,EAAV1E,KAAKmB,IAC9CxB,EAAIe,UAASU,uBAAAA,OAA0B6G,EAAMnH,QAAU,KACvDnB,EAAI0B,MACR,IAGA1B,EAAIe,UAAY,4BAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAEhD,EAGa8H,EAAgB,SAACxI,EAAQC,GAOlC,IANA,IAAMkG,EAAY,GAEZsC,EAAQ,GAILtI,EAAI,EAAGA,EAHE,EAGaA,IAC3BsI,EAAMrI,KAAK,CACPC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGT,EAAOU,OACVA,OAAwB,IAAhBJ,KAAKC,SAAiB,IAC9BC,MAAuB,IAAhBF,KAAKC,SAAiB,KAKrC,IAAK,IAAIJ,EAAI,EAAGA,EAfK,IAeaA,IAC9BgG,EAAU/F,KAAK,CACXC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BC,OAAwB,EAAhBL,KAAKC,SAAe,EAC5BuB,MAAuB,GAAhBxB,KAAKC,SAAiB,GAC7BiD,MAAOlD,KAAKC,SAAWD,KAAKmB,GAAK,EACjCiH,WAAoC,KAAvBpI,KAAKC,SAAW,IAC7BoI,cAAerI,KAAKC,WAI5B,OAAO,WAEHN,EAAIe,UAAY,sBAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAGxC+H,EAAMvH,SAAQ,SAAA0H,GACV3I,EAAIsB,YACJtB,EAAIuC,OAAOoG,EAAKvI,EAAGuI,EAAKnI,GACxBR,EAAIwC,OAAOmG,EAAKvI,EAAIuI,EAAKpI,MAAQ,EAAGoI,EAAKnI,EAAImI,EAAKlI,QAClDT,EAAIwC,OAAOmG,EAAKvI,EAAIuI,EAAKpI,MAAQ,EAAGoI,EAAKnI,EAAImI,EAAKlI,QAClDT,EAAIuE,YACJvE,EAAIe,UAAY,sBAChBf,EAAI0B,MACR,IAGAwE,EAAUjF,SAAQ,SAAA2H,GACdA,EAAIxI,GAAKC,KAAKmD,IAAIoF,EAAIrF,OAASqF,EAAI/G,MACnC+G,EAAIpI,GAAKH,KAAKgB,IAAIuH,EAAIrF,OAASqF,EAAI/G,MACnC+G,EAAIrF,OAASqF,EAAIH,YAEbG,EAAIxI,EAAI,GAAKwI,EAAIxI,EAAIL,EAAOQ,SAAOqI,EAAIrF,MAAQlD,KAAKmB,GAAKoH,EAAIrF,QAC7DqF,EAAIpI,EAAI,GAAKoI,EAAIpI,EAAIT,EAAOU,UAAQmI,EAAIrF,OAASqF,EAAIrF,OAEzDqF,EAAIF,cAA6D,GAA7CrI,KAAKgB,IAAiB,KAAbwH,KAAKC,MAAwB,GAARF,EAAIxI,GAAiB,GAEvEJ,EAAIsB,YACJtB,EAAIuB,IAAIqH,EAAIxI,EAAGwI,EAAIpI,EAAGoI,EAAIlI,OAAQ,EAAa,EAAVL,KAAKmB,IAC1CxB,EAAIe,UAASU,uBAAAA,OAA0BmH,EAAIF,cAAgB,KAC3D1I,EAAI0B,OAEJ1B,EAAIsB,YACJtB,EAAIuB,IAAIqH,EAAIxI,EAAGwI,EAAIpI,EAAgB,EAAboI,EAAIlI,OAAY,EAAa,EAAVL,KAAKmB,IAC9C,IAAMY,EAAWpC,EAAI6E,qBAAqB+D,EAAIxI,EAAGwI,EAAIpI,EAAG,EAAGoI,EAAIxI,EAAGwI,EAAIpI,EAAgB,EAAboI,EAAIlI,QAC7E0B,EAASE,aAAa,EAACb,uBAAAA,OAA6C,GAApBmH,EAAIF,oBACpDtG,EAASE,aAAa,EAAG,0BACzBtC,EAAIe,UAAYqB,EAChBpC,EAAI0B,MACR,IAER,EACaqH,EAAkB,SAAChJ,EAAQC,GACpC,IAEIgJ,EAFEpB,EAAS,GAIf,SAASqB,EAAY7I,EAAGI,GAIpB,IAHA,IAAM0I,EAAgB7I,KAAKO,MAAsB,GAAhBP,KAAKC,UAAiB,GACjDqC,EAAY,GAETzC,EAAI,EAAGA,EAAIgJ,EAAehJ,IAC/ByC,EAAUxC,KAAK,CACXC,EAAGA,EAAoB,IAAhBC,KAAKC,SAAiB,IAC7BE,EAAGA,EAAoB,IAAhBH,KAAKC,SAAiB,GAC7BI,OAAwB,GAAhBL,KAAKC,SAAgB,KAIrC,MAAO,CACHqC,UAAAA,EACAvC,EAAAA,EACAI,EAAAA,EACAqB,MAAuB,GAAhBxB,KAAKC,SAAiB,GAErC,CAEA,IAAK,IAAIJ,EAAI,EAAGA,EAvBG,GAuBaA,IAC5B0H,EAAOzH,KAAK8I,EAAY5I,KAAKC,SAAWP,EAAOQ,MAAOF,KAAKC,UAAYP,EAAOU,OAAS,KAI3F,IAAM0I,EAAoB,WACtBH,EAAiBjJ,EAAOU,OACxB,IAAM2B,EAAWpC,EAAIqC,qBAAqB,EAAG,EAAG,EAAG2G,GAInD,OAHA5G,EAASE,aAAa,EAAG,WACzBF,EAASE,aAAa,GAAK,WAC3BF,EAASE,aAAa,EAAG,WAClBF,GAGPsF,EAAcyB,IAElB,OAAO,WAECH,IAAmBjJ,EAAOU,SAC1BiH,EAAcyB,KAIlBnJ,EAAIe,UAAY2G,EAChB1H,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAExCmH,EAAO3G,SAAQ,SAAA6G,GACXA,EAAM1H,GAAK0H,EAAMjG,MACbiG,EAAM1H,EAAIL,EAAOQ,MAAQ,MACzBuH,EAAM1H,GAAK,KAGfJ,EAAI2D,OACJ3D,EAAI4D,UAAUkE,EAAM1H,EAAG0H,EAAMtH,GAG7BsH,EAAMnF,UAAU1B,SAAQ,SAAA2B,GACpB5C,EAAIsB,YACJtB,EAAIuB,IAAIqB,EAASxC,EAAI,EAAGwC,EAASpC,EAAI,EAAGoC,EAASlC,OAAQ,EAAa,EAAVL,KAAKmB,IACjExB,EAAIe,UAAY,qBAChBf,EAAI0B,MACR,IAGAoG,EAAMnF,UAAU1B,SAAQ,SAAA2B,GACpB5C,EAAIsB,YACJtB,EAAIuB,IAAIqB,EAASxC,EAAGwC,EAASpC,EAAGoC,EAASlC,OAAQ,EAAa,EAAVL,KAAKmB,IACzD,IAAMY,EAAWpC,EAAI6E,qBAAqBjC,EAASxC,EAAGwC,EAASpC,EAAG,EAAGoC,EAASxC,EAAGwC,EAASpC,EAAGoC,EAASlC,QACtG0B,EAASE,aAAa,EAAG,4BACzBF,EAASE,aAAa,EAAG,4BACzBtC,EAAIe,UAAYqB,EAChBpC,EAAI0B,MACR,IAEA1B,EAAI+D,SACR,IAKA/D,EAAIsB,YACJtB,EAAIuB,IAAIxB,EAAOQ,MAAQ,IAAK,IAHV,GAG0B,EAAa,EAAVF,KAAKmB,IACpD,IAAMqG,EAAc7H,EAAI6E,qBAAqB9E,EAAOQ,MAAQ,IAAK,IAAK,EAAGR,EAAOQ,MAAQ,IAAK,IAAK6I,IAClGvB,EAAYvF,aAAa,EAAG,0BAC5BuF,EAAYvF,aAAa,GAAK,0BAC9BuF,EAAYvF,aAAa,EAAG,wBAC5BtC,EAAIe,UAAY8G,EAChB7H,EAAI0B,OAEZ,EAEa2H,EAAe,SAACtJ,EAAQC,GACjC,IAYQsJ,EAZFC,EAAS,GAETC,EAAa,CAAC,UAAW,UAAW,UAAW,UAAW,WAC1DC,EAAa,CACf,QACA,SAEEC,EAAmB,GACrBC,GAAe,EAIXL,EAAc,EAClBG,EAAWxI,SAAQ,SAAC2I,EAAKpE,GACrB,IAAMqE,EAAM,IAAIC,MAChBD,EAAIE,OAAS,WACTL,EAAiBlE,GAASqE,IAC1BP,IACoBG,EAAW5G,SAC3B8G,GAAe,IAGvBE,EAAIG,QAAU,aACVV,IACoBG,EAAW5G,SAC3B8G,GAAe,IAGvBE,EAAID,IAAMA,CACd,IAKJ,IAAK,IAAI1J,EAAI,EAAGA,EAjCE,IAiCaA,IAC3BqJ,EAAOpJ,KAAK,CACRC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BsE,KAAsB,GAAhB1E,KAAKC,SAAgB,GAC3BuB,MAAuB,EAAhBxB,KAAKC,SAAe,EAC3B2J,UAA2B,GAAhB5J,KAAKC,SAAgB,GAChCiD,MAAOlD,KAAKC,SAAWD,KAAKmB,GAAK,EACjCiH,WAAoC,KAAvBpI,KAAKC,SAAW,IAC7B4J,WAAY7J,KAAKO,MAAMP,KAAKC,SAAWmJ,EAAW5G,QAClDf,MAAO0H,EAAWnJ,KAAKO,MAAMP,KAAKC,SAAWkJ,EAAW3G,WAsBhE,OAAO,WACH7C,EAAIe,UAAY,2BAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAExC8I,EAAOtI,SAAQ,SAAAkJ,GACXA,EAAK3J,GAAK2J,EAAKtI,MACfsI,EAAK/J,GAAKC,KAAKgB,IAAa,IAAT8I,EAAK3J,GAAY2J,EAAKF,UAAY,IACrDE,EAAK5G,OAAS4G,EAAK1B,WAEf0B,EAAK3J,EAAIT,EAAOU,SAChB0J,EAAK3J,GAAK2J,EAAKpF,KACfoF,EAAK/J,EAAIC,KAAKC,SAAWP,EAAOQ,OA7B3B,SAAC4J,GACdnK,EAAI2D,OACJ3D,EAAI4D,UAAUuG,EAAK/J,EAAG+J,EAAK3J,GAC3BR,EAAI6D,OAAOsG,EAAK5G,OAEZoG,GAAgBD,EAAiBS,EAAKD,YACtClK,EAAIoK,UAAUV,EAAiBS,EAAKD,aAAcC,EAAKpF,KAAO,GAAIoF,EAAKpF,KAAO,EAAGoF,EAAKpF,KAAMoF,EAAKpF,OAGjG/E,EAAIsB,YACJtB,EAAIqK,QAAQ,EAAG,EAAGF,EAAKpF,KAAO,EAAGoF,EAAKpF,KAAO,EAAG,EAAG,EAAa,EAAV1E,KAAKmB,IAC3DxB,EAAIe,UAAYoJ,EAAKrI,MACrB9B,EAAI0B,QAGR1B,EAAI+D,UAiBAuG,CAASH,EACb,IAER,EAEaI,EAAgB,SAACxK,EAAQC,GAKlC,IAJA,IAAMwK,EAAY,GAEZC,EAAW,GAERvK,EAAI,EAAGA,EAHE,IAGaA,IAC3BsK,EAAUrK,KAAK,CACXC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BoC,OAAwB,GAAhBxC,KAAKC,SAAgB,GAC7BuB,MAAuB,GAAhBxB,KAAKC,SAAgB,KAIpC,OAAO,WACHN,EAAIe,UAAY,qBAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAGxCT,EAAIgC,YAAc,2BAClBhC,EAAIyC,UAAY,EAChB+H,EAAUvJ,SAAQ,SAAAyJ,GACd1K,EAAIsB,YACJtB,EAAIuC,OAAOmI,EAAKtK,EAAGsK,EAAKlK,GACxBR,EAAIwC,OAAOkI,EAAKtK,EAAGsK,EAAKlK,EAAIkK,EAAK7H,QACjC7C,EAAIiC,SAEJyI,EAAKlK,GAAKkK,EAAK7I,MAEX6I,EAAKlK,EAAIT,EAAOU,SAChBiK,EAAKlK,GAAKkK,EAAK7H,OACf4H,EAAStK,KAAK,CACVC,EAAGsK,EAAKtK,EACRI,EAAGT,EAAOU,OACVC,OAAwB,EAAhBL,KAAKC,SAAe,EAC5Ba,QAAS,IAGrB,IAGAsJ,EAASxJ,SAAQ,SAAC0J,EAAQnF,GACtBxF,EAAIsB,YACJtB,EAAIuB,IAAIoJ,EAAOvK,EAAGuK,EAAOnK,EAAGmK,EAAOjK,OAAQ,EAAa,EAAVL,KAAKmB,IACnDxB,EAAIe,UAASU,uBAAAA,OAA0BkJ,EAAOxJ,QAAU,KACxDnB,EAAI0B,OAEJiJ,EAAOjK,QAAU,GACjBiK,EAAOxJ,SAAW,IAEdwJ,EAAOxJ,SAAW,GAClBsJ,EAAShF,OAAOD,EAAO,EAE/B,IAER,EAGaoF,EAAoB,SAAC7K,EAAQC,GAqBtC,IApBA,IAAM6K,EAAY,GACZC,EAAY,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAI3L7G,EAAS,CACX,CAAE+C,EAAG,IAAK+D,EAAG,IAAKC,EAAG,KACrB,CAAEhE,EAAG,IAAK+D,EAAG,IAAKC,EAAG,KACrB,CAAEhE,EAAG,IAAK+D,EAAG,IAAKC,EAAG,KACrB,CAAEhE,EAAG,IAAK+D,EAAG,IAAKC,EAAG,KACrB,CAAEhE,EAAG,IAAK+D,EAAG,IAAKC,EAAG,KACrB,CAAEhE,EAAG,IAAK+D,EAAG,IAAKC,EAAG,KACrB,CAAEhE,EAAG,IAAK+D,EAAG,IAAKC,EAAG,MAGrBC,EAAa,EACbC,EAAiB,EACjBC,EAAS,EAGJjL,EAAI,EAAGA,EAlBC,GAkBaA,IAC1B2K,EAAU1K,KAAK,CACXC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAASV,EAAOU,OAC1C2K,MAAON,EAAUzK,KAAKO,MAAMP,KAAKC,SAAWwK,EAAUjI,SACtDkC,KAAsB,GAAhB1E,KAAKC,SAAgB,GAC3BuB,MAAuB,IAAhBxB,KAAKC,SAAiB,GAC7BoD,SAAUrD,KAAKC,SAAWD,KAAKmB,GAAK,EACpC6J,cAAyC,KAAT,EAAhBhL,KAAKC,SAAe,KAY5C,OAAO,YAEH6K,GAxBe,OAyBD,IACVA,EAAS,EACTF,EAAaC,EACbA,GAAkBA,EAAiB,GAAKjH,EAAOpB,QAEnD,IAhBeyI,EAAQC,EAAQxE,EAgBzByE,GAhBSF,EAgBgBrH,EAAOgH,GAhBfM,EAgB4BtH,EAAOiH,GAhB3BnE,EAgB4CoE,EAfpE,CACHnE,EAAG3G,KAAKoL,MAAMH,EAAOtE,GAAKuE,EAAOvE,EAAIsE,EAAOtE,GAAKD,GACjDgE,EAAG1K,KAAKoL,MAAMH,EAAOP,GAAKQ,EAAOR,EAAIO,EAAOP,GAAKhE,GACjDiE,EAAG3K,KAAKoL,MAAMH,EAAON,GAAKO,EAAOP,EAAIM,EAAON,GAAKjE,KAe/C3E,EAAWpC,EAAIqC,qBAAqB,EAAG,EAAGtC,EAAOQ,MAAOR,EAAOU,QACrE2B,EAASE,aAAa,SAACb,OAAS+J,EAAaxE,EAAC,MAAAvF,OAAK+J,EAAaT,EAACtJ,MAAAA,OAAK+J,EAAaR,EAAC,MACpF5I,EAASE,aAAa,EAACb,OAAAA,OAAS,IAAM+J,EAAaxE,EAACvF,MAAAA,OAAK,IAAM+J,EAAaT,EAACtJ,MAAAA,OAAK,IAAM+J,EAAaR,QAGrGhL,EAAI0L,OAAS,YAGb1L,EAAIe,UAAYqB,EAChBpC,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAGxCT,EAAI0L,OAAS,OAGbb,EAAU5J,SAAQ,SAAA0K,GACd3L,EAAI2D,OACJ3D,EAAI4D,UAAU+H,EAAKvL,EAAGuL,EAAKnL,GAC3BR,EAAI6D,OAAO8H,EAAKjI,UAChB1D,EAAI2G,KAAIlF,GAAAA,OAAMkK,EAAK5G,KAAc,YACjC/E,EAAI4L,UAAY,SAChB5L,EAAI6L,aAAe,SAGnB7L,EAAIgC,YAAc,QAClBhC,EAAIyC,UAAY,EAChBzC,EAAI8L,WAAWH,EAAKP,MAAO,EAAG,GAG9BpL,EAAIe,UAAY,QAChBf,EAAI6G,SAAS8E,EAAKP,MAAO,EAAG,GAC5BpL,EAAI+D,UAEJ4H,EAAKnL,GAAKmL,EAAK9J,MACf8J,EAAKjI,UAAYiI,EAAKN,cAClBM,EAAKnL,EAAIT,EAAOU,OAASkL,EAAK5G,OAC9B4G,EAAKnL,GAAKmL,EAAK5G,KACf4G,EAAKvL,EAAIC,KAAKC,SAAWP,EAAOQ,MAExC,IAER,EAEawL,EAAgB,SAAChM,EAAQC,GAMlC,IALA,IAAMwI,EAAQ,GACRtC,EAAY,GACZ8F,EAAM,GAGH9L,EAAI,EAAGA,EAAI,GAAIA,IACpBsI,EAAMrI,KAAK,CACPC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BE,OAAwB,IAAhBJ,KAAKC,SAAiB,IAC9BC,MAAuB,GAAhBF,KAAKC,SAAgB,KAKpC,IAAK,IAAIJ,EAAI,EAAGA,EAAI,GAAIA,IACpBgG,EAAU/F,KAAK,CACXC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BC,OAAwB,EAAhBL,KAAKC,SAAe,EAC5BuB,MAAuB,GAAhBxB,KAAKC,SAAiB,GAC7Ba,QAASd,KAAKC,WAKtB,IAAK,IAAIJ,EAAI,EAAGA,EAAI,IAAKA,IACrB8L,EAAI7L,KAAK,CACLC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BC,OAAwB,GAAhBL,KAAKC,SAAgB,GAC7BuB,MAAuB,GAAhBxB,KAAKC,SAAiB,KAIrC,OAAO,WACHN,EAAIe,UAAY,UAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAGxCT,EAAIe,UAAY,UAChByH,EAAMvH,SAAQ,SAAA0H,GACV3I,EAAIsB,YACJtB,EAAIuC,OAAOoG,EAAKvI,EAAGL,EAAOU,QAC1BT,EAAIwC,OAAOmG,EAAKvI,EAAIuI,EAAKpI,MAAQ,EAAGR,EAAOU,OAASkI,EAAKlI,QACzDT,EAAIwC,OAAOmG,EAAKvI,EAAIuI,EAAKpI,MAAQ,EAAGR,EAAOU,OAASkI,EAAKlI,QACzDT,EAAIuE,YACJvE,EAAI0B,MACR,IAGA1B,EAAIe,UAAY,4BAChBiL,EAAI/K,SAAQ,SAAA2B,GACR5C,EAAIsB,YACJtB,EAAIuB,IAAIqB,EAASxC,EAAGwC,EAASpC,EAAGoC,EAASlC,OAAQ,EAAa,EAAVL,KAAKmB,IACzDxB,EAAI0B,OAEJkB,EAASxC,GAAKwC,EAASf,MACnBe,EAASxC,EAAIL,EAAOQ,MAAQqC,EAASlC,SACrCkC,EAASxC,GAAKwC,EAASlC,OAE/B,IAGAwF,EAAUjF,SAAQ,SAAAmF,GACdpG,EAAIsB,YACJtB,EAAIuB,IAAI6E,EAAQhG,EAAGgG,EAAQ5F,EAAG4F,EAAQ1F,OAAQ,EAAa,EAAVL,KAAKmB,IACtDxB,EAAIe,UAASU,uBAAAA,OAA0B2E,EAAQjF,QAAU,KACzDnB,EAAI0B,OAEJ0E,EAAQhG,GAAKC,KAAKgB,IAAiB,KAAbwH,KAAKC,OAAiB1C,EAAQvE,MACpDuE,EAAQ5F,GAAKH,KAAKmD,IAAiB,KAAbqF,KAAKC,OAAiB1C,EAAQvE,MACpDuE,EAAQjF,QAAwC,GAA9Bd,KAAKgB,IAAiB,IAAbwH,KAAKC,OAAsB,GAElD1C,EAAQhG,EAAI,IAAGgG,EAAQhG,EAAIL,EAAOQ,OAClC6F,EAAQhG,EAAIL,EAAOQ,QAAO6F,EAAQhG,EAAI,GACtCgG,EAAQ5F,EAAI,IAAG4F,EAAQ5F,EAAIT,EAAOU,QAClC2F,EAAQ5F,EAAIT,EAAOU,SAAQ2F,EAAQ5F,EAAI,EAC/C,IAER,EAEayL,EAAqB,SAAClM,EAAQC,GAIvC,IAHA,IAAMkM,EAAS,GAGNhM,EAAI,EAAGA,EAFE,EAEaA,IAC3BgM,EAAO/L,KAAK,CACRC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BsE,KAAsB,GAAhB1E,KAAKC,SAAgB,GAC3BuB,MAAuB,GAAhBxB,KAAKC,SAAiB,GAC7Ba,QAAyB,GAAhBd,KAAKC,WAItB,OAAO,WACHN,EAAIe,UAAY,UAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAExCyL,EAAOjL,SAAQ,SAAAkL,GACXnM,EAAIsB,YACJtB,EAAIuC,OAAO4J,EAAM/L,EAAG+L,EAAM3L,GAC1BR,EAAIoM,cACAD,EAAM/L,EAAI+L,EAAMpH,KAAO,EAAGoH,EAAM3L,EAAI2L,EAAMpH,KAAO,EACjDoH,EAAM/L,EAAI+L,EAAMpH,KAAO,EAAGoH,EAAM3L,EAAI2L,EAAMpH,KAAO,EACjDoH,EAAM/L,EAAG+L,EAAM3L,EAAI2L,EAAMpH,MAE7B/E,EAAIoM,cACAD,EAAM/L,EAAI+L,EAAMpH,KAAO,EAAGoH,EAAM3L,EAAI2L,EAAMpH,KAAO,EACjDoH,EAAM/L,EAAI+L,EAAMpH,KAAO,EAAGoH,EAAM3L,EAAI2L,EAAMpH,KAAO,EACjDoH,EAAM/L,EAAG+L,EAAM3L,GAGnB,IAAM4B,EAAWpC,EAAI6E,qBACjBsH,EAAM/L,EAAG+L,EAAM3L,EAAG,EAClB2L,EAAM/L,EAAG+L,EAAM3L,EAAG2L,EAAMpH,MAE5B3C,EAASE,aAAa,EAAC,uBAAAb,OAAyB0K,EAAMhL,QAAO,MAC7DiB,EAASE,aAAa,EAAG,0BAEzBtC,EAAIe,UAAYqB,EAChBpC,EAAI0B,OAEJyK,EAAM3L,GAAK2L,EAAMtK,MACjBsK,EAAMhL,QAAyC,GAA/Bd,KAAKgB,IAAiB,KAAbwH,KAAKC,OAAuB,GAEjDqD,EAAM3L,EAAI2L,EAAMpH,KAAO,IACvBoH,EAAM3L,EAAIT,EAAOU,OAAS0L,EAAMpH,KAChCoH,EAAM/L,EAAIC,KAAKC,SAAWP,EAAOQ,MAEzC,IAER,EAEa8L,EAAmB,SAACtM,EAAQC,GAIrC,IAHA,IAAMsM,EAAO,GAGJpM,EAAI,EAAGA,EAFA,GAEaA,IACzBoM,EAAKnM,KAAK,CACNC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BsE,KAAsB,IAAhB1E,KAAKC,SAAiB,GAC5BoD,SAAUrD,KAAKC,SAAWD,KAAKmB,GAAK,IA8B5C,OAAO,WACHxB,EAAIgG,UAAU,EAAG,EAAGjG,EAAOQ,MAAOR,EAAOU,QAEzC6L,EAAKrL,SAAQ,SAAAsL,IA7BD,SAACnM,EAAGI,EAAGuE,EAAMrB,GACzB1D,EAAI2D,OACJ3D,EAAI4D,UAAUxD,EAAGI,GACjBR,EAAI6D,OAAOH,GAEX1D,EAAIsB,YACJ,IAAK,IAAIpB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAMqD,EAAmB,EAAVlD,KAAKmB,GAAS,EAAKtB,EAClCF,EAAIuC,OAAO,EAAG,GACdvC,EAAIwC,OAAOnC,KAAKmD,IAAID,GAASwB,EAAM1E,KAAKgB,IAAIkC,GAASwB,EACzD,CAEA,IAAK,IAAIiC,EAAIjC,EAAO,EAAGiC,EAAIjC,EAAMiC,GAAKjC,EAAO,EAAG,CAC5C/E,EAAIuC,OAAOyE,EAAG,GACd,IAAK,IAAI9G,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAMqD,EAAmB,EAAVlD,KAAKmB,GAAS,EAAKtB,EAClCF,EAAIwC,OAAOnC,KAAKmD,IAAID,GAASyD,EAAG3G,KAAKgB,IAAIkC,GAASyD,EACtD,CACAhH,EAAIuE,WACR,CAEAvE,EAAIgC,YAAc,2BAClBhC,EAAIiC,SACJjC,EAAI+D,UAOAyI,CAAQD,EAAInM,EAAGmM,EAAI/L,EAAG+L,EAAIxH,KAAMwH,EAAI7I,SACxC,IAER,EAIa+I,EAAkB,SAAC1M,EAAQC,GAMpC,IALA,IAAM0M,EAAS,GACTC,EAAU,GACVX,EAAM,GAGH9L,EAAI,EAAGA,EAAI,GAAIA,IACpBwM,EAAOvM,KAAK,CACRC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGT,EAAOU,OAAyB,IAAhBJ,KAAKC,SAAiB,GACzCC,MAAuB,GAAhBF,KAAKC,SAAgB,GAC5BG,OAAwB,GAAhBJ,KAAKC,SAAgB,KAKrC,IAAK,IAAIJ,EAAI,EAAGA,EAAI,GAAIA,IACpByM,EAAQxM,KAAK,CACTC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGT,EAAOU,OACVoB,MAAuB,GAAhBxB,KAAKC,SAAiB,GAC7ByE,KAAsB,GAAhB1E,KAAKC,SAAgB,KAKnC,IAAK,IAAIJ,EAAI,EAAGA,EAAI,GAAIA,IACpB8L,EAAI7L,KAAK,CACLC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BC,OAAwB,IAAhBL,KAAKC,SAAiB,GAC9BuB,MAAuB,GAAhBxB,KAAKC,SAAiB,KAIrC,OAAO,WAEH,IAAM8B,EAAWpC,EAAIqC,qBAAqB,EAAG,EAAG,EAAGtC,EAAOU,QAC1D2B,EAASE,aAAa,EAAG,WACzBF,EAASE,aAAa,EAAG,WACzBtC,EAAIe,UAAYqB,EAChBpC,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAGxCT,EAAIsB,YACJtB,EAAIuB,IAAmB,GAAfxB,EAAOQ,MAA6B,GAAhBR,EAAOU,OAAc,GAAI,EAAa,EAAVJ,KAAKmB,IAC7DxB,EAAIe,UAAY,2BAChBf,EAAI0B,OAGJ1B,EAAIe,UAAY,OAChB2L,EAAOzL,SAAQ,SAAA2L,GACX5M,EAAIgB,SAAS4L,EAAMxM,EAAGwM,EAAMpM,EAAGoM,EAAMrM,MAAOqM,EAAMnM,QAClDT,EAAIe,UAAY,OAChBf,EAAIgB,SAAS4L,EAAMxM,EAAkB,GAAdwM,EAAMrM,MAAaqM,EAAMpM,EAAiB,GAAdoM,EAAMrM,MAA4B,GAAfqM,EAAMnM,OAChF,IAGAkM,EAAQ1L,SAAQ,SAAA4L,GACZ7M,EAAIsB,YACJtB,EAAIuB,IAAIsL,EAAOzM,EAAGyM,EAAOrM,EAAIqM,EAAO9H,KAAoB,GAAd8H,EAAO9H,KAAY,EAAa,EAAV1E,KAAKmB,IACrExB,EAAIe,UAAY,OAChBf,EAAI0B,OAEJ1B,EAAIsB,YACJtB,EAAIuC,OAAOsK,EAAOzM,EAAGyM,EAAOrM,EAAIqM,EAAO9H,MACvC/E,EAAIwC,OAAOqK,EAAOzM,EAAkB,GAAdyM,EAAO9H,KAAY8H,EAAOrM,GAChDR,EAAIwC,OAAOqK,EAAOzM,EAAkB,GAAdyM,EAAO9H,KAAY8H,EAAOrM,GAChDR,EAAIuE,YACJvE,EAAIe,UAAY,OAChBf,EAAI0B,OAEJmL,EAAOrM,GAAKqM,EAAOhL,MACfgL,EAAOrM,EAAoB,GAAhBT,EAAOU,SAClBoM,EAAOrM,EAAIT,EAAOU,OAClBoM,EAAOzM,EAAIC,KAAKC,SAAWP,EAAOQ,MAE1C,IAGAP,EAAIe,UAAY,4BAChBiL,EAAI/K,SAAQ,SAAA2B,GACR5C,EAAIsB,YACJtB,EAAIuB,IAAIqB,EAASxC,EAAGwC,EAASpC,EAAGoC,EAASlC,OAAQ,EAAa,EAAVL,KAAKmB,IACzDxB,EAAI0B,OAEJkB,EAASxC,GAAKwC,EAASf,MACnBe,EAASxC,EAAIL,EAAOQ,MAAQqC,EAASlC,SACrCkC,EAASxC,GAAKwC,EAASlC,OAE/B,IAER,EAEaoM,EAAY,SAAC/M,EAAQC,GAI9B,IAHA,IAAMyG,EAAQ,GACRsG,EAAS,GAEN7M,EAAI,EAAGA,EAAI,IAAKA,IACrBuG,EAAMtG,KAAK,CACPC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BoC,OAAwB,GAAhBxC,KAAKC,SAAgB,GAC7BuB,MAAuB,EAAhBxB,KAAKC,SAAe,IAInC,OAAO,WACHN,EAAIe,UAAY,sBAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAGxCT,EAAIgC,YAAc,OAClBhC,EAAIyC,UAAY,EAChBgE,EAAMxF,SAAQ,SAAAyJ,GACV1K,EAAIsB,YACJtB,EAAIuC,OAAOmI,EAAKtK,EAAGsK,EAAKlK,GACxBR,EAAIwC,OAAOkI,EAAKtK,EAAGsK,EAAKlK,EAAIkK,EAAK7H,QACjC7C,EAAIiC,SAEJyI,EAAKlK,GAAKkK,EAAK7I,MAEX6I,EAAKlK,EAAIT,EAAOU,SAChBiK,EAAKlK,EAAI,EACTkK,EAAKtK,EAAIC,KAAKC,SAAWP,EAAOQ,MAGhCwM,EAAO5M,KAAK,CACRC,EAAGsK,EAAKtK,EACRI,EAAGT,EAAOU,OACVsE,KAAsB,EAAhB1E,KAAKC,SAAe,EAC1Ba,QAAS,IAGrB,IAGA4L,EAAO9L,SAAQ,SAAC+L,EAAOxH,GACnBxF,EAAIsB,YACJtB,EAAIuB,IAAIyL,EAAM5M,EAAG4M,EAAMxM,EAAGwM,EAAMjI,KAAM,EAAa,EAAV1E,KAAKmB,IAC9CxB,EAAIe,UAASU,mBAAAA,OAAsBuL,EAAM7L,QAAU,KACnDnB,EAAI0B,OAEJsL,EAAM7L,SAAW,KACb6L,EAAM7L,SAAW,GACjB4L,EAAOtH,OAAOD,EAAO,EAE7B,IAER,EAEayH,EAAiB,SAAClN,EAAQC,GAInC,IAHA,IAAMkN,EAAO,GACPC,EAAW,GAERjN,EAAI,EAAGA,EAAI,GAAIA,IACpBgN,EAAK/M,KAAK,CACNC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,OAC1BsE,KAAsB,EAAhB1E,KAAKC,SAAe,EAC1B0E,OAAwB,EAAhB3E,KAAKC,SAAe,EAC5B2E,OAAwB,EAAhB5E,KAAKC,SAAe,IAIpC,IAAK,IAAIJ,EAAI,EAAGA,EAAI,GAAIA,IACpBiN,EAAShN,KAAK,CACVC,EAAGC,KAAKC,SAAWP,EAAOQ,MAC1BC,EAAGH,KAAKC,SAAWP,EAAOU,SAIlC,OAAO,WACHT,EAAIe,UAAY,qBAChBf,EAAIgB,SAAS,EAAG,EAAGjB,EAAOQ,MAAOR,EAAOU,QAGxCT,EAAIgC,YAAc,2BAClBhC,EAAIsB,YACJ6L,EAASlM,SAAQ,SAACoG,EAAM7B,GACpB2H,EAASC,MAAM5H,EAAQ,GAAGvE,SAAQ,SAAAoM,GAC9BrN,EAAIuC,OAAO8E,EAAKjH,EAAGiH,EAAK7G,GACxBR,EAAIwC,OAAO6K,EAAUjN,EAAGiN,EAAU7M,EACtC,GACJ,IACAR,EAAIiC,SAGJjC,EAAIe,UAAY,OAChBmM,EAAKjM,SAAQ,SAAAqM,GACTtN,EAAIsB,YACJtB,EAAIuB,IAAI+L,EAAIlN,EAAGkN,EAAI9M,EAAG8M,EAAIvI,KAAM,EAAa,EAAV1E,KAAKmB,IACxCxB,EAAI0B,OAEJ4L,EAAIlN,GAAKkN,EAAItI,OACbsI,EAAI9M,GAAK8M,EAAIrI,QAETqI,EAAIlN,EAAI,GAAKkN,EAAIlN,EAAIL,EAAOQ,SAAO+M,EAAItI,SAAW,IAClDsI,EAAI9M,EAAI,GAAK8M,EAAI9M,EAAIT,EAAOU,UAAQ6M,EAAIrI,SAAW,GAGnD5E,KAAKC,SAAW,MAChBgN,EAAItI,OAAyB,EAAhB3E,KAAKC,SAAe,EACjCgN,EAAIrI,OAAyB,EAAhB5E,KAAKC,SAAe,EAEzC,IAER,EC7kDMiN,EAAqB,SAAHjG,GAAkF,IAA5EkG,EAAalG,EAAbkG,cAAaC,EAAAnG,EAAEoG,kBAAAA,OAAoB,IAAHD,EAAG,kBAAiBA,EAAAE,EAAArG,EAAEsG,IAAAA,OAAM,IAAHD,EAAG,GAAEA,EAAEE,EAAKvG,EAALuG,MACpFC,EAAYC,EAAO,MACnBC,EAAeD,EAAO,MAEtBE,EAAcC,GAAY,WAC5B,IAAMnO,EAAS+N,EAAUK,QACnBnO,EAAMD,EAAOqO,WAAW,MAC9BrO,EAAOQ,MAAQ8N,OAAOC,WACtBvO,EAAOU,OAAS4N,OAAOE,YAEvB,IAAMC,EAAa,CACf1O,YAAAA,EAAa6B,gBAAAA,EAAiBO,aAAAA,EAAcQ,gBAAAA,EAAiBS,aAAAA,EAC7Da,aAAAA,EAAc6B,gBAAAA,EAAiBK,UAAAA,EAAWK,WAAAA,EAAYb,aAAAA,EACtDR,cAAAA,EAAeJ,WAAAA,EAAYN,UAAAA,EAAWN,eAAAA,EAAgBuD,WAAAA,EACtDR,cAAAA,EAAeH,SAAAA,EAAUiB,SAAAA,EAAUwC,cAAAA,EAAexB,gBAAAA,EAClDR,cAAAA,EAAec,aAAAA,EAAcuB,kBAAAA,EAAoBmB,cAAAA,EACjDE,mBAAAA,EACAI,iBAAAA,EACAI,gBAAAA,EACAK,UAAAA,EACAG,eAAAA,GAGAwB,EAAYD,EAAWhB,GAO3B,OALKiB,IACDC,QAAQC,KAAI,cAAAlN,OAAe+L,6CAC3BiB,EAAYD,EAAWd,IAAsBc,EAAW3I,iBAGrD4I,EAAU1O,EAAQC,EAC7B,GAAG,CAACwN,EAAeE,IAyCnB,OAvCAkB,GAAU,WACN,IACUH,EACFI,EACEC,EAFAL,EAAYR,IACdY,EAAW,EACTC,EAAgB,IAAOlB,EAY7BI,EAAaG,QAAUY,uBAVV,SAAPC,EAAQC,GACVjB,EAAaG,QAAUY,sBAAsBC,GAE7C,IAAME,EAAYD,EAAcJ,EAC5BK,GAAaJ,IACbD,EAAWI,EAAeC,EAAYJ,EACtCL,QASZ,IAAMU,EAAe,WACbrB,EAAUK,UACVL,EAAUK,QAAQ5N,MAAQ8N,OAAOC,WACjCR,EAAUK,QAAQ1N,OAAS4N,OAAOE,YAClCN,MAMR,OAFAI,OAAOe,iBAAiB,SAAUD,GAE3B,WACCnB,EAAaG,SACbkB,qBAAqBrB,EAAaG,SAEtCE,OAAOiB,oBAAoB,SAAUH,GAE7C,GAAG,CAACvB,EAAKK,IAGLsB,EAAAC,cAAA,SAAA,CACIC,IAAK3B,EACLD,MAAK6B,EAAA,CACDC,SAAU,QACVC,IAAK,EACLC,KAAM,EACNtP,MAAO,OACPE,OAAQ,OACRqP,QAAS,GACNjC,IAInB"}